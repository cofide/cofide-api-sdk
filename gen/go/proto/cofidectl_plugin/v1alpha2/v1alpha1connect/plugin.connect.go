// Copyright 2024 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/cofidectl_plugin/v1alpha2/plugin.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/cofidectl_plugin/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataSourcePluginServiceName is the fully-qualified name of the DataSourcePluginService service.
	DataSourcePluginServiceName = "proto.cofidectl_plugin.v1alpha2.DataSourcePluginService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataSourcePluginServiceValidateProcedure is the fully-qualified name of the
	// DataSourcePluginService's Validate RPC.
	DataSourcePluginServiceValidateProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/Validate"
	// DataSourcePluginServiceAddTrustZoneProcedure is the fully-qualified name of the
	// DataSourcePluginService's AddTrustZone RPC.
	DataSourcePluginServiceAddTrustZoneProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddTrustZone"
	// DataSourcePluginServiceDestroyTrustZoneProcedure is the fully-qualified name of the
	// DataSourcePluginService's DestroyTrustZone RPC.
	DataSourcePluginServiceDestroyTrustZoneProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyTrustZone"
	// DataSourcePluginServiceGetTrustZoneProcedure is the fully-qualified name of the
	// DataSourcePluginService's GetTrustZone RPC.
	DataSourcePluginServiceGetTrustZoneProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/GetTrustZone"
	// DataSourcePluginServiceListTrustZonesProcedure is the fully-qualified name of the
	// DataSourcePluginService's ListTrustZones RPC.
	DataSourcePluginServiceListTrustZonesProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListTrustZones"
	// DataSourcePluginServiceUpdateTrustZoneProcedure is the fully-qualified name of the
	// DataSourcePluginService's UpdateTrustZone RPC.
	DataSourcePluginServiceUpdateTrustZoneProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/UpdateTrustZone"
	// DataSourcePluginServiceAddClusterProcedure is the fully-qualified name of the
	// DataSourcePluginService's AddCluster RPC.
	DataSourcePluginServiceAddClusterProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddCluster"
	// DataSourcePluginServiceDestroyClusterProcedure is the fully-qualified name of the
	// DataSourcePluginService's DestroyCluster RPC.
	DataSourcePluginServiceDestroyClusterProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyCluster"
	// DataSourcePluginServiceGetClusterProcedure is the fully-qualified name of the
	// DataSourcePluginService's GetCluster RPC.
	DataSourcePluginServiceGetClusterProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/GetCluster"
	// DataSourcePluginServiceListClustersProcedure is the fully-qualified name of the
	// DataSourcePluginService's ListClusters RPC.
	DataSourcePluginServiceListClustersProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListClusters"
	// DataSourcePluginServiceUpdateClusterProcedure is the fully-qualified name of the
	// DataSourcePluginService's UpdateCluster RPC.
	DataSourcePluginServiceUpdateClusterProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/UpdateCluster"
	// DataSourcePluginServiceAddAttestationPolicyProcedure is the fully-qualified name of the
	// DataSourcePluginService's AddAttestationPolicy RPC.
	DataSourcePluginServiceAddAttestationPolicyProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddAttestationPolicy"
	// DataSourcePluginServiceDestroyAttestationPolicyProcedure is the fully-qualified name of the
	// DataSourcePluginService's DestroyAttestationPolicy RPC.
	DataSourcePluginServiceDestroyAttestationPolicyProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyAttestationPolicy"
	// DataSourcePluginServiceGetAttestationPolicyProcedure is the fully-qualified name of the
	// DataSourcePluginService's GetAttestationPolicy RPC.
	DataSourcePluginServiceGetAttestationPolicyProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/GetAttestationPolicy"
	// DataSourcePluginServiceListAttestationPoliciesProcedure is the fully-qualified name of the
	// DataSourcePluginService's ListAttestationPolicies RPC.
	DataSourcePluginServiceListAttestationPoliciesProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListAttestationPolicies"
	// DataSourcePluginServiceAddAPBindingProcedure is the fully-qualified name of the
	// DataSourcePluginService's AddAPBinding RPC.
	DataSourcePluginServiceAddAPBindingProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddAPBinding"
	// DataSourcePluginServiceDestroyAPBindingProcedure is the fully-qualified name of the
	// DataSourcePluginService's DestroyAPBinding RPC.
	DataSourcePluginServiceDestroyAPBindingProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyAPBinding"
	// DataSourcePluginServiceListAPBindingsProcedure is the fully-qualified name of the
	// DataSourcePluginService's ListAPBindings RPC.
	DataSourcePluginServiceListAPBindingsProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListAPBindings"
	// DataSourcePluginServiceAddFederationProcedure is the fully-qualified name of the
	// DataSourcePluginService's AddFederation RPC.
	DataSourcePluginServiceAddFederationProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddFederation"
	// DataSourcePluginServiceDestroyFederationProcedure is the fully-qualified name of the
	// DataSourcePluginService's DestroyFederation RPC.
	DataSourcePluginServiceDestroyFederationProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyFederation"
	// DataSourcePluginServiceListFederationsProcedure is the fully-qualified name of the
	// DataSourcePluginService's ListFederations RPC.
	DataSourcePluginServiceListFederationsProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListFederations"
	// DataSourcePluginServiceListFederationsByTrustZoneProcedure is the fully-qualified name of the
	// DataSourcePluginService's ListFederationsByTrustZone RPC.
	DataSourcePluginServiceListFederationsByTrustZoneProcedure = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListFederationsByTrustZone"
)

// DataSourcePluginServiceClient is a client for the
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService service.
type DataSourcePluginServiceClient interface {
	Validate(context.Context, *connect.Request[v1alpha1.ValidateRequest]) (*connect.Response[v1alpha1.ValidateResponse], error)
	AddTrustZone(context.Context, *connect.Request[v1alpha1.AddTrustZoneRequest]) (*connect.Response[v1alpha1.AddTrustZoneResponse], error)
	DestroyTrustZone(context.Context, *connect.Request[v1alpha1.DestroyTrustZoneRequest]) (*connect.Response[v1alpha1.DestroyTrustZoneResponse], error)
	GetTrustZone(context.Context, *connect.Request[v1alpha1.GetTrustZoneRequest]) (*connect.Response[v1alpha1.GetTrustZoneResponse], error)
	ListTrustZones(context.Context, *connect.Request[v1alpha1.ListTrustZonesRequest]) (*connect.Response[v1alpha1.ListTrustZonesResponse], error)
	UpdateTrustZone(context.Context, *connect.Request[v1alpha1.UpdateTrustZoneRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneResponse], error)
	AddCluster(context.Context, *connect.Request[v1alpha1.AddClusterRequest]) (*connect.Response[v1alpha1.AddClusterResponse], error)
	DestroyCluster(context.Context, *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error)
	GetCluster(context.Context, *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error)
	UpdateCluster(context.Context, *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error)
	AddAttestationPolicy(context.Context, *connect.Request[v1alpha1.AddAttestationPolicyRequest]) (*connect.Response[v1alpha1.AddAttestationPolicyResponse], error)
	DestroyAttestationPolicy(context.Context, *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error)
	GetAttestationPolicy(context.Context, *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error)
	ListAttestationPolicies(context.Context, *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error)
	AddAPBinding(context.Context, *connect.Request[v1alpha1.AddAPBindingRequest]) (*connect.Response[v1alpha1.AddAPBindingResponse], error)
	DestroyAPBinding(context.Context, *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error)
	ListAPBindings(context.Context, *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error)
	AddFederation(context.Context, *connect.Request[v1alpha1.AddFederationRequest]) (*connect.Response[v1alpha1.AddFederationResponse], error)
	DestroyFederation(context.Context, *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error)
	ListFederations(context.Context, *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error)
	ListFederationsByTrustZone(context.Context, *connect.Request[v1alpha1.ListFederationsByTrustZoneRequest]) (*connect.Response[v1alpha1.ListFederationsByTrustZoneResponse], error)
}

// NewDataSourcePluginServiceClient constructs a client for the
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataSourcePluginServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataSourcePluginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataSourcePluginServiceMethods := v1alpha1.File_proto_cofidectl_plugin_v1alpha2_plugin_proto.Services().ByName("DataSourcePluginService").Methods()
	return &dataSourcePluginServiceClient{
		validate: connect.NewClient[v1alpha1.ValidateRequest, v1alpha1.ValidateResponse](
			httpClient,
			baseURL+DataSourcePluginServiceValidateProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("Validate")),
			connect.WithClientOptions(opts...),
		),
		addTrustZone: connect.NewClient[v1alpha1.AddTrustZoneRequest, v1alpha1.AddTrustZoneResponse](
			httpClient,
			baseURL+DataSourcePluginServiceAddTrustZoneProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddTrustZone")),
			connect.WithClientOptions(opts...),
		),
		destroyTrustZone: connect.NewClient[v1alpha1.DestroyTrustZoneRequest, v1alpha1.DestroyTrustZoneResponse](
			httpClient,
			baseURL+DataSourcePluginServiceDestroyTrustZoneProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyTrustZone")),
			connect.WithClientOptions(opts...),
		),
		getTrustZone: connect.NewClient[v1alpha1.GetTrustZoneRequest, v1alpha1.GetTrustZoneResponse](
			httpClient,
			baseURL+DataSourcePluginServiceGetTrustZoneProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("GetTrustZone")),
			connect.WithClientOptions(opts...),
		),
		listTrustZones: connect.NewClient[v1alpha1.ListTrustZonesRequest, v1alpha1.ListTrustZonesResponse](
			httpClient,
			baseURL+DataSourcePluginServiceListTrustZonesProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListTrustZones")),
			connect.WithClientOptions(opts...),
		),
		updateTrustZone: connect.NewClient[v1alpha1.UpdateTrustZoneRequest, v1alpha1.UpdateTrustZoneResponse](
			httpClient,
			baseURL+DataSourcePluginServiceUpdateTrustZoneProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("UpdateTrustZone")),
			connect.WithClientOptions(opts...),
		),
		addCluster: connect.NewClient[v1alpha1.AddClusterRequest, v1alpha1.AddClusterResponse](
			httpClient,
			baseURL+DataSourcePluginServiceAddClusterProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddCluster")),
			connect.WithClientOptions(opts...),
		),
		destroyCluster: connect.NewClient[v1alpha1.DestroyClusterRequest, v1alpha1.DestroyClusterResponse](
			httpClient,
			baseURL+DataSourcePluginServiceDestroyClusterProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyCluster")),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1alpha1.GetClusterRequest, v1alpha1.GetClusterResponse](
			httpClient,
			baseURL+DataSourcePluginServiceGetClusterProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("GetCluster")),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1alpha1.ListClustersRequest, v1alpha1.ListClustersResponse](
			httpClient,
			baseURL+DataSourcePluginServiceListClustersProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListClusters")),
			connect.WithClientOptions(opts...),
		),
		updateCluster: connect.NewClient[v1alpha1.UpdateClusterRequest, v1alpha1.UpdateClusterResponse](
			httpClient,
			baseURL+DataSourcePluginServiceUpdateClusterProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("UpdateCluster")),
			connect.WithClientOptions(opts...),
		),
		addAttestationPolicy: connect.NewClient[v1alpha1.AddAttestationPolicyRequest, v1alpha1.AddAttestationPolicyResponse](
			httpClient,
			baseURL+DataSourcePluginServiceAddAttestationPolicyProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddAttestationPolicy")),
			connect.WithClientOptions(opts...),
		),
		destroyAttestationPolicy: connect.NewClient[v1alpha1.DestroyAttestationPolicyRequest, v1alpha1.DestroyAttestationPolicyResponse](
			httpClient,
			baseURL+DataSourcePluginServiceDestroyAttestationPolicyProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyAttestationPolicy")),
			connect.WithClientOptions(opts...),
		),
		getAttestationPolicy: connect.NewClient[v1alpha1.GetAttestationPolicyRequest, v1alpha1.GetAttestationPolicyResponse](
			httpClient,
			baseURL+DataSourcePluginServiceGetAttestationPolicyProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("GetAttestationPolicy")),
			connect.WithClientOptions(opts...),
		),
		listAttestationPolicies: connect.NewClient[v1alpha1.ListAttestationPoliciesRequest, v1alpha1.ListAttestationPoliciesResponse](
			httpClient,
			baseURL+DataSourcePluginServiceListAttestationPoliciesProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListAttestationPolicies")),
			connect.WithClientOptions(opts...),
		),
		addAPBinding: connect.NewClient[v1alpha1.AddAPBindingRequest, v1alpha1.AddAPBindingResponse](
			httpClient,
			baseURL+DataSourcePluginServiceAddAPBindingProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddAPBinding")),
			connect.WithClientOptions(opts...),
		),
		destroyAPBinding: connect.NewClient[v1alpha1.DestroyAPBindingRequest, v1alpha1.DestroyAPBindingResponse](
			httpClient,
			baseURL+DataSourcePluginServiceDestroyAPBindingProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyAPBinding")),
			connect.WithClientOptions(opts...),
		),
		listAPBindings: connect.NewClient[v1alpha1.ListAPBindingsRequest, v1alpha1.ListAPBindingsResponse](
			httpClient,
			baseURL+DataSourcePluginServiceListAPBindingsProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListAPBindings")),
			connect.WithClientOptions(opts...),
		),
		addFederation: connect.NewClient[v1alpha1.AddFederationRequest, v1alpha1.AddFederationResponse](
			httpClient,
			baseURL+DataSourcePluginServiceAddFederationProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddFederation")),
			connect.WithClientOptions(opts...),
		),
		destroyFederation: connect.NewClient[v1alpha1.DestroyFederationRequest, v1alpha1.DestroyFederationResponse](
			httpClient,
			baseURL+DataSourcePluginServiceDestroyFederationProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyFederation")),
			connect.WithClientOptions(opts...),
		),
		listFederations: connect.NewClient[v1alpha1.ListFederationsRequest, v1alpha1.ListFederationsResponse](
			httpClient,
			baseURL+DataSourcePluginServiceListFederationsProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListFederations")),
			connect.WithClientOptions(opts...),
		),
		listFederationsByTrustZone: connect.NewClient[v1alpha1.ListFederationsByTrustZoneRequest, v1alpha1.ListFederationsByTrustZoneResponse](
			httpClient,
			baseURL+DataSourcePluginServiceListFederationsByTrustZoneProcedure,
			connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListFederationsByTrustZone")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataSourcePluginServiceClient implements DataSourcePluginServiceClient.
type dataSourcePluginServiceClient struct {
	validate                   *connect.Client[v1alpha1.ValidateRequest, v1alpha1.ValidateResponse]
	addTrustZone               *connect.Client[v1alpha1.AddTrustZoneRequest, v1alpha1.AddTrustZoneResponse]
	destroyTrustZone           *connect.Client[v1alpha1.DestroyTrustZoneRequest, v1alpha1.DestroyTrustZoneResponse]
	getTrustZone               *connect.Client[v1alpha1.GetTrustZoneRequest, v1alpha1.GetTrustZoneResponse]
	listTrustZones             *connect.Client[v1alpha1.ListTrustZonesRequest, v1alpha1.ListTrustZonesResponse]
	updateTrustZone            *connect.Client[v1alpha1.UpdateTrustZoneRequest, v1alpha1.UpdateTrustZoneResponse]
	addCluster                 *connect.Client[v1alpha1.AddClusterRequest, v1alpha1.AddClusterResponse]
	destroyCluster             *connect.Client[v1alpha1.DestroyClusterRequest, v1alpha1.DestroyClusterResponse]
	getCluster                 *connect.Client[v1alpha1.GetClusterRequest, v1alpha1.GetClusterResponse]
	listClusters               *connect.Client[v1alpha1.ListClustersRequest, v1alpha1.ListClustersResponse]
	updateCluster              *connect.Client[v1alpha1.UpdateClusterRequest, v1alpha1.UpdateClusterResponse]
	addAttestationPolicy       *connect.Client[v1alpha1.AddAttestationPolicyRequest, v1alpha1.AddAttestationPolicyResponse]
	destroyAttestationPolicy   *connect.Client[v1alpha1.DestroyAttestationPolicyRequest, v1alpha1.DestroyAttestationPolicyResponse]
	getAttestationPolicy       *connect.Client[v1alpha1.GetAttestationPolicyRequest, v1alpha1.GetAttestationPolicyResponse]
	listAttestationPolicies    *connect.Client[v1alpha1.ListAttestationPoliciesRequest, v1alpha1.ListAttestationPoliciesResponse]
	addAPBinding               *connect.Client[v1alpha1.AddAPBindingRequest, v1alpha1.AddAPBindingResponse]
	destroyAPBinding           *connect.Client[v1alpha1.DestroyAPBindingRequest, v1alpha1.DestroyAPBindingResponse]
	listAPBindings             *connect.Client[v1alpha1.ListAPBindingsRequest, v1alpha1.ListAPBindingsResponse]
	addFederation              *connect.Client[v1alpha1.AddFederationRequest, v1alpha1.AddFederationResponse]
	destroyFederation          *connect.Client[v1alpha1.DestroyFederationRequest, v1alpha1.DestroyFederationResponse]
	listFederations            *connect.Client[v1alpha1.ListFederationsRequest, v1alpha1.ListFederationsResponse]
	listFederationsByTrustZone *connect.Client[v1alpha1.ListFederationsByTrustZoneRequest, v1alpha1.ListFederationsByTrustZoneResponse]
}

// Validate calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.Validate.
func (c *dataSourcePluginServiceClient) Validate(ctx context.Context, req *connect.Request[v1alpha1.ValidateRequest]) (*connect.Response[v1alpha1.ValidateResponse], error) {
	return c.validate.CallUnary(ctx, req)
}

// AddTrustZone calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddTrustZone.
func (c *dataSourcePluginServiceClient) AddTrustZone(ctx context.Context, req *connect.Request[v1alpha1.AddTrustZoneRequest]) (*connect.Response[v1alpha1.AddTrustZoneResponse], error) {
	return c.addTrustZone.CallUnary(ctx, req)
}

// DestroyTrustZone calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyTrustZone.
func (c *dataSourcePluginServiceClient) DestroyTrustZone(ctx context.Context, req *connect.Request[v1alpha1.DestroyTrustZoneRequest]) (*connect.Response[v1alpha1.DestroyTrustZoneResponse], error) {
	return c.destroyTrustZone.CallUnary(ctx, req)
}

// GetTrustZone calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.GetTrustZone.
func (c *dataSourcePluginServiceClient) GetTrustZone(ctx context.Context, req *connect.Request[v1alpha1.GetTrustZoneRequest]) (*connect.Response[v1alpha1.GetTrustZoneResponse], error) {
	return c.getTrustZone.CallUnary(ctx, req)
}

// ListTrustZones calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListTrustZones.
func (c *dataSourcePluginServiceClient) ListTrustZones(ctx context.Context, req *connect.Request[v1alpha1.ListTrustZonesRequest]) (*connect.Response[v1alpha1.ListTrustZonesResponse], error) {
	return c.listTrustZones.CallUnary(ctx, req)
}

// UpdateTrustZone calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.UpdateTrustZone.
func (c *dataSourcePluginServiceClient) UpdateTrustZone(ctx context.Context, req *connect.Request[v1alpha1.UpdateTrustZoneRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneResponse], error) {
	return c.updateTrustZone.CallUnary(ctx, req)
}

// AddCluster calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddCluster.
func (c *dataSourcePluginServiceClient) AddCluster(ctx context.Context, req *connect.Request[v1alpha1.AddClusterRequest]) (*connect.Response[v1alpha1.AddClusterResponse], error) {
	return c.addCluster.CallUnary(ctx, req)
}

// DestroyCluster calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyCluster.
func (c *dataSourcePluginServiceClient) DestroyCluster(ctx context.Context, req *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error) {
	return c.destroyCluster.CallUnary(ctx, req)
}

// GetCluster calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.GetCluster.
func (c *dataSourcePluginServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// ListClusters calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListClusters.
func (c *dataSourcePluginServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// UpdateCluster calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.UpdateCluster.
func (c *dataSourcePluginServiceClient) UpdateCluster(ctx context.Context, req *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error) {
	return c.updateCluster.CallUnary(ctx, req)
}

// AddAttestationPolicy calls
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddAttestationPolicy.
func (c *dataSourcePluginServiceClient) AddAttestationPolicy(ctx context.Context, req *connect.Request[v1alpha1.AddAttestationPolicyRequest]) (*connect.Response[v1alpha1.AddAttestationPolicyResponse], error) {
	return c.addAttestationPolicy.CallUnary(ctx, req)
}

// DestroyAttestationPolicy calls
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyAttestationPolicy.
func (c *dataSourcePluginServiceClient) DestroyAttestationPolicy(ctx context.Context, req *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error) {
	return c.destroyAttestationPolicy.CallUnary(ctx, req)
}

// GetAttestationPolicy calls
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.GetAttestationPolicy.
func (c *dataSourcePluginServiceClient) GetAttestationPolicy(ctx context.Context, req *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error) {
	return c.getAttestationPolicy.CallUnary(ctx, req)
}

// ListAttestationPolicies calls
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListAttestationPolicies.
func (c *dataSourcePluginServiceClient) ListAttestationPolicies(ctx context.Context, req *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error) {
	return c.listAttestationPolicies.CallUnary(ctx, req)
}

// AddAPBinding calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddAPBinding.
func (c *dataSourcePluginServiceClient) AddAPBinding(ctx context.Context, req *connect.Request[v1alpha1.AddAPBindingRequest]) (*connect.Response[v1alpha1.AddAPBindingResponse], error) {
	return c.addAPBinding.CallUnary(ctx, req)
}

// DestroyAPBinding calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyAPBinding.
func (c *dataSourcePluginServiceClient) DestroyAPBinding(ctx context.Context, req *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error) {
	return c.destroyAPBinding.CallUnary(ctx, req)
}

// ListAPBindings calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListAPBindings.
func (c *dataSourcePluginServiceClient) ListAPBindings(ctx context.Context, req *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error) {
	return c.listAPBindings.CallUnary(ctx, req)
}

// AddFederation calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddFederation.
func (c *dataSourcePluginServiceClient) AddFederation(ctx context.Context, req *connect.Request[v1alpha1.AddFederationRequest]) (*connect.Response[v1alpha1.AddFederationResponse], error) {
	return c.addFederation.CallUnary(ctx, req)
}

// DestroyFederation calls
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyFederation.
func (c *dataSourcePluginServiceClient) DestroyFederation(ctx context.Context, req *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error) {
	return c.destroyFederation.CallUnary(ctx, req)
}

// ListFederations calls proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListFederations.
func (c *dataSourcePluginServiceClient) ListFederations(ctx context.Context, req *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error) {
	return c.listFederations.CallUnary(ctx, req)
}

// ListFederationsByTrustZone calls
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListFederationsByTrustZone.
func (c *dataSourcePluginServiceClient) ListFederationsByTrustZone(ctx context.Context, req *connect.Request[v1alpha1.ListFederationsByTrustZoneRequest]) (*connect.Response[v1alpha1.ListFederationsByTrustZoneResponse], error) {
	return c.listFederationsByTrustZone.CallUnary(ctx, req)
}

// DataSourcePluginServiceHandler is an implementation of the
// proto.cofidectl_plugin.v1alpha2.DataSourcePluginService service.
type DataSourcePluginServiceHandler interface {
	Validate(context.Context, *connect.Request[v1alpha1.ValidateRequest]) (*connect.Response[v1alpha1.ValidateResponse], error)
	AddTrustZone(context.Context, *connect.Request[v1alpha1.AddTrustZoneRequest]) (*connect.Response[v1alpha1.AddTrustZoneResponse], error)
	DestroyTrustZone(context.Context, *connect.Request[v1alpha1.DestroyTrustZoneRequest]) (*connect.Response[v1alpha1.DestroyTrustZoneResponse], error)
	GetTrustZone(context.Context, *connect.Request[v1alpha1.GetTrustZoneRequest]) (*connect.Response[v1alpha1.GetTrustZoneResponse], error)
	ListTrustZones(context.Context, *connect.Request[v1alpha1.ListTrustZonesRequest]) (*connect.Response[v1alpha1.ListTrustZonesResponse], error)
	UpdateTrustZone(context.Context, *connect.Request[v1alpha1.UpdateTrustZoneRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneResponse], error)
	AddCluster(context.Context, *connect.Request[v1alpha1.AddClusterRequest]) (*connect.Response[v1alpha1.AddClusterResponse], error)
	DestroyCluster(context.Context, *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error)
	GetCluster(context.Context, *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error)
	UpdateCluster(context.Context, *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error)
	AddAttestationPolicy(context.Context, *connect.Request[v1alpha1.AddAttestationPolicyRequest]) (*connect.Response[v1alpha1.AddAttestationPolicyResponse], error)
	DestroyAttestationPolicy(context.Context, *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error)
	GetAttestationPolicy(context.Context, *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error)
	ListAttestationPolicies(context.Context, *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error)
	AddAPBinding(context.Context, *connect.Request[v1alpha1.AddAPBindingRequest]) (*connect.Response[v1alpha1.AddAPBindingResponse], error)
	DestroyAPBinding(context.Context, *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error)
	ListAPBindings(context.Context, *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error)
	AddFederation(context.Context, *connect.Request[v1alpha1.AddFederationRequest]) (*connect.Response[v1alpha1.AddFederationResponse], error)
	DestroyFederation(context.Context, *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error)
	ListFederations(context.Context, *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error)
	ListFederationsByTrustZone(context.Context, *connect.Request[v1alpha1.ListFederationsByTrustZoneRequest]) (*connect.Response[v1alpha1.ListFederationsByTrustZoneResponse], error)
}

// NewDataSourcePluginServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataSourcePluginServiceHandler(svc DataSourcePluginServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataSourcePluginServiceMethods := v1alpha1.File_proto_cofidectl_plugin_v1alpha2_plugin_proto.Services().ByName("DataSourcePluginService").Methods()
	dataSourcePluginServiceValidateHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceValidateProcedure,
		svc.Validate,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("Validate")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceAddTrustZoneHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceAddTrustZoneProcedure,
		svc.AddTrustZone,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddTrustZone")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceDestroyTrustZoneHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceDestroyTrustZoneProcedure,
		svc.DestroyTrustZone,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyTrustZone")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceGetTrustZoneHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceGetTrustZoneProcedure,
		svc.GetTrustZone,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("GetTrustZone")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceListTrustZonesHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceListTrustZonesProcedure,
		svc.ListTrustZones,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListTrustZones")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceUpdateTrustZoneHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceUpdateTrustZoneProcedure,
		svc.UpdateTrustZone,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("UpdateTrustZone")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceAddClusterHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceAddClusterProcedure,
		svc.AddCluster,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddCluster")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceDestroyClusterHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceDestroyClusterProcedure,
		svc.DestroyCluster,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyCluster")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceGetClusterHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("GetCluster")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceListClustersHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListClusters")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceUpdateClusterHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceUpdateClusterProcedure,
		svc.UpdateCluster,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("UpdateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceAddAttestationPolicyHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceAddAttestationPolicyProcedure,
		svc.AddAttestationPolicy,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddAttestationPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceDestroyAttestationPolicyHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceDestroyAttestationPolicyProcedure,
		svc.DestroyAttestationPolicy,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyAttestationPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceGetAttestationPolicyHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceGetAttestationPolicyProcedure,
		svc.GetAttestationPolicy,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("GetAttestationPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceListAttestationPoliciesHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceListAttestationPoliciesProcedure,
		svc.ListAttestationPolicies,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListAttestationPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceAddAPBindingHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceAddAPBindingProcedure,
		svc.AddAPBinding,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddAPBinding")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceDestroyAPBindingHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceDestroyAPBindingProcedure,
		svc.DestroyAPBinding,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyAPBinding")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceListAPBindingsHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceListAPBindingsProcedure,
		svc.ListAPBindings,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListAPBindings")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceAddFederationHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceAddFederationProcedure,
		svc.AddFederation,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("AddFederation")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceDestroyFederationHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceDestroyFederationProcedure,
		svc.DestroyFederation,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("DestroyFederation")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceListFederationsHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceListFederationsProcedure,
		svc.ListFederations,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListFederations")),
		connect.WithHandlerOptions(opts...),
	)
	dataSourcePluginServiceListFederationsByTrustZoneHandler := connect.NewUnaryHandler(
		DataSourcePluginServiceListFederationsByTrustZoneProcedure,
		svc.ListFederationsByTrustZone,
		connect.WithSchema(dataSourcePluginServiceMethods.ByName("ListFederationsByTrustZone")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataSourcePluginServiceValidateProcedure:
			dataSourcePluginServiceValidateHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceAddTrustZoneProcedure:
			dataSourcePluginServiceAddTrustZoneHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceDestroyTrustZoneProcedure:
			dataSourcePluginServiceDestroyTrustZoneHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceGetTrustZoneProcedure:
			dataSourcePluginServiceGetTrustZoneHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceListTrustZonesProcedure:
			dataSourcePluginServiceListTrustZonesHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceUpdateTrustZoneProcedure:
			dataSourcePluginServiceUpdateTrustZoneHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceAddClusterProcedure:
			dataSourcePluginServiceAddClusterHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceDestroyClusterProcedure:
			dataSourcePluginServiceDestroyClusterHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceGetClusterProcedure:
			dataSourcePluginServiceGetClusterHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceListClustersProcedure:
			dataSourcePluginServiceListClustersHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceUpdateClusterProcedure:
			dataSourcePluginServiceUpdateClusterHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceAddAttestationPolicyProcedure:
			dataSourcePluginServiceAddAttestationPolicyHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceDestroyAttestationPolicyProcedure:
			dataSourcePluginServiceDestroyAttestationPolicyHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceGetAttestationPolicyProcedure:
			dataSourcePluginServiceGetAttestationPolicyHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceListAttestationPoliciesProcedure:
			dataSourcePluginServiceListAttestationPoliciesHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceAddAPBindingProcedure:
			dataSourcePluginServiceAddAPBindingHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceDestroyAPBindingProcedure:
			dataSourcePluginServiceDestroyAPBindingHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceListAPBindingsProcedure:
			dataSourcePluginServiceListAPBindingsHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceAddFederationProcedure:
			dataSourcePluginServiceAddFederationHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceDestroyFederationProcedure:
			dataSourcePluginServiceDestroyFederationHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceListFederationsProcedure:
			dataSourcePluginServiceListFederationsHandler.ServeHTTP(w, r)
		case DataSourcePluginServiceListFederationsByTrustZoneProcedure:
			dataSourcePluginServiceListFederationsByTrustZoneHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataSourcePluginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataSourcePluginServiceHandler struct{}

func (UnimplementedDataSourcePluginServiceHandler) Validate(context.Context, *connect.Request[v1alpha1.ValidateRequest]) (*connect.Response[v1alpha1.ValidateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.Validate is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) AddTrustZone(context.Context, *connect.Request[v1alpha1.AddTrustZoneRequest]) (*connect.Response[v1alpha1.AddTrustZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddTrustZone is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) DestroyTrustZone(context.Context, *connect.Request[v1alpha1.DestroyTrustZoneRequest]) (*connect.Response[v1alpha1.DestroyTrustZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyTrustZone is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) GetTrustZone(context.Context, *connect.Request[v1alpha1.GetTrustZoneRequest]) (*connect.Response[v1alpha1.GetTrustZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.GetTrustZone is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) ListTrustZones(context.Context, *connect.Request[v1alpha1.ListTrustZonesRequest]) (*connect.Response[v1alpha1.ListTrustZonesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListTrustZones is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) UpdateTrustZone(context.Context, *connect.Request[v1alpha1.UpdateTrustZoneRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.UpdateTrustZone is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) AddCluster(context.Context, *connect.Request[v1alpha1.AddClusterRequest]) (*connect.Response[v1alpha1.AddClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddCluster is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) DestroyCluster(context.Context, *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyCluster is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) GetCluster(context.Context, *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.GetCluster is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) ListClusters(context.Context, *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListClusters is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) UpdateCluster(context.Context, *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.UpdateCluster is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) AddAttestationPolicy(context.Context, *connect.Request[v1alpha1.AddAttestationPolicyRequest]) (*connect.Response[v1alpha1.AddAttestationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddAttestationPolicy is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) DestroyAttestationPolicy(context.Context, *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyAttestationPolicy is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) GetAttestationPolicy(context.Context, *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.GetAttestationPolicy is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) ListAttestationPolicies(context.Context, *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListAttestationPolicies is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) AddAPBinding(context.Context, *connect.Request[v1alpha1.AddAPBindingRequest]) (*connect.Response[v1alpha1.AddAPBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddAPBinding is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) DestroyAPBinding(context.Context, *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyAPBinding is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) ListAPBindings(context.Context, *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListAPBindings is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) AddFederation(context.Context, *connect.Request[v1alpha1.AddFederationRequest]) (*connect.Response[v1alpha1.AddFederationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.AddFederation is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) DestroyFederation(context.Context, *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.DestroyFederation is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) ListFederations(context.Context, *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListFederations is not implemented"))
}

func (UnimplementedDataSourcePluginServiceHandler) ListFederationsByTrustZone(context.Context, *connect.Request[v1alpha1.ListFederationsByTrustZoneRequest]) (*connect.Response[v1alpha1.ListFederationsByTrustZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.cofidectl_plugin.v1alpha2.DataSourcePluginService.ListFederationsByTrustZone is not implemented"))
}
