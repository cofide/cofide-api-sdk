// Copyright 2024 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/cofidectl_plugin/v1alpha2/plugin.proto

package v1alpha2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataSourcePluginService_Validate_FullMethodName                 = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/Validate"
	DataSourcePluginService_AddTrustZone_FullMethodName             = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddTrustZone"
	DataSourcePluginService_DestroyTrustZone_FullMethodName         = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyTrustZone"
	DataSourcePluginService_GetTrustZone_FullMethodName             = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/GetTrustZone"
	DataSourcePluginService_GetTrustZoneByName_FullMethodName       = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/GetTrustZoneByName"
	DataSourcePluginService_ListTrustZones_FullMethodName           = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListTrustZones"
	DataSourcePluginService_UpdateTrustZone_FullMethodName          = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/UpdateTrustZone"
	DataSourcePluginService_AddCluster_FullMethodName               = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddCluster"
	DataSourcePluginService_DestroyCluster_FullMethodName           = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyCluster"
	DataSourcePluginService_GetCluster_FullMethodName               = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/GetCluster"
	DataSourcePluginService_ListClusters_FullMethodName             = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListClusters"
	DataSourcePluginService_UpdateCluster_FullMethodName            = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/UpdateCluster"
	DataSourcePluginService_AddAttestationPolicy_FullMethodName     = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddAttestationPolicy"
	DataSourcePluginService_DestroyAttestationPolicy_FullMethodName = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyAttestationPolicy"
	DataSourcePluginService_GetAttestationPolicy_FullMethodName     = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/GetAttestationPolicy"
	DataSourcePluginService_ListAttestationPolicies_FullMethodName  = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListAttestationPolicies"
	DataSourcePluginService_AddAPBinding_FullMethodName             = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddAPBinding"
	DataSourcePluginService_DestroyAPBinding_FullMethodName         = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyAPBinding"
	DataSourcePluginService_ListAPBindings_FullMethodName           = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListAPBindings"
	DataSourcePluginService_AddFederation_FullMethodName            = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/AddFederation"
	DataSourcePluginService_DestroyFederation_FullMethodName        = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/DestroyFederation"
	DataSourcePluginService_ListFederations_FullMethodName          = "/proto.cofidectl_plugin.v1alpha2.DataSourcePluginService/ListFederations"
)

// DataSourcePluginServiceClient is the client API for DataSourcePluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataSourcePluginServiceClient interface {
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	AddTrustZone(ctx context.Context, in *AddTrustZoneRequest, opts ...grpc.CallOption) (*AddTrustZoneResponse, error)
	DestroyTrustZone(ctx context.Context, in *DestroyTrustZoneRequest, opts ...grpc.CallOption) (*DestroyTrustZoneResponse, error)
	GetTrustZone(ctx context.Context, in *GetTrustZoneRequest, opts ...grpc.CallOption) (*GetTrustZoneResponse, error)
	GetTrustZoneByName(ctx context.Context, in *GetTrustZoneByNameRequest, opts ...grpc.CallOption) (*GetTrustZoneByNameResponse, error)
	ListTrustZones(ctx context.Context, in *ListTrustZonesRequest, opts ...grpc.CallOption) (*ListTrustZonesResponse, error)
	UpdateTrustZone(ctx context.Context, in *UpdateTrustZoneRequest, opts ...grpc.CallOption) (*UpdateTrustZoneResponse, error)
	AddCluster(ctx context.Context, in *AddClusterRequest, opts ...grpc.CallOption) (*AddClusterResponse, error)
	DestroyCluster(ctx context.Context, in *DestroyClusterRequest, opts ...grpc.CallOption) (*DestroyClusterResponse, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error)
	AddAttestationPolicy(ctx context.Context, in *AddAttestationPolicyRequest, opts ...grpc.CallOption) (*AddAttestationPolicyResponse, error)
	DestroyAttestationPolicy(ctx context.Context, in *DestroyAttestationPolicyRequest, opts ...grpc.CallOption) (*DestroyAttestationPolicyResponse, error)
	GetAttestationPolicy(ctx context.Context, in *GetAttestationPolicyRequest, opts ...grpc.CallOption) (*GetAttestationPolicyResponse, error)
	ListAttestationPolicies(ctx context.Context, in *ListAttestationPoliciesRequest, opts ...grpc.CallOption) (*ListAttestationPoliciesResponse, error)
	AddAPBinding(ctx context.Context, in *AddAPBindingRequest, opts ...grpc.CallOption) (*AddAPBindingResponse, error)
	DestroyAPBinding(ctx context.Context, in *DestroyAPBindingRequest, opts ...grpc.CallOption) (*DestroyAPBindingResponse, error)
	ListAPBindings(ctx context.Context, in *ListAPBindingsRequest, opts ...grpc.CallOption) (*ListAPBindingsResponse, error)
	AddFederation(ctx context.Context, in *AddFederationRequest, opts ...grpc.CallOption) (*AddFederationResponse, error)
	DestroyFederation(ctx context.Context, in *DestroyFederationRequest, opts ...grpc.CallOption) (*DestroyFederationResponse, error)
	ListFederations(ctx context.Context, in *ListFederationsRequest, opts ...grpc.CallOption) (*ListFederationsResponse, error)
}

type dataSourcePluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataSourcePluginServiceClient(cc grpc.ClientConnInterface) DataSourcePluginServiceClient {
	return &dataSourcePluginServiceClient{cc}
}

func (c *dataSourcePluginServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) AddTrustZone(ctx context.Context, in *AddTrustZoneRequest, opts ...grpc.CallOption) (*AddTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTrustZoneResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_AddTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) DestroyTrustZone(ctx context.Context, in *DestroyTrustZoneRequest, opts ...grpc.CallOption) (*DestroyTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyTrustZoneResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_DestroyTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) GetTrustZone(ctx context.Context, in *GetTrustZoneRequest, opts ...grpc.CallOption) (*GetTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrustZoneResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_GetTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) GetTrustZoneByName(ctx context.Context, in *GetTrustZoneByNameRequest, opts ...grpc.CallOption) (*GetTrustZoneByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrustZoneByNameResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_GetTrustZoneByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) ListTrustZones(ctx context.Context, in *ListTrustZonesRequest, opts ...grpc.CallOption) (*ListTrustZonesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrustZonesResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_ListTrustZones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) UpdateTrustZone(ctx context.Context, in *UpdateTrustZoneRequest, opts ...grpc.CallOption) (*UpdateTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrustZoneResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_UpdateTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) AddCluster(ctx context.Context, in *AddClusterRequest, opts ...grpc.CallOption) (*AddClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddClusterResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_AddCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) DestroyCluster(ctx context.Context, in *DestroyClusterRequest, opts ...grpc.CallOption) (*DestroyClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyClusterResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_DestroyCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClusterResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_UpdateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) AddAttestationPolicy(ctx context.Context, in *AddAttestationPolicyRequest, opts ...grpc.CallOption) (*AddAttestationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAttestationPolicyResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_AddAttestationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) DestroyAttestationPolicy(ctx context.Context, in *DestroyAttestationPolicyRequest, opts ...grpc.CallOption) (*DestroyAttestationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyAttestationPolicyResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_DestroyAttestationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) GetAttestationPolicy(ctx context.Context, in *GetAttestationPolicyRequest, opts ...grpc.CallOption) (*GetAttestationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttestationPolicyResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_GetAttestationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) ListAttestationPolicies(ctx context.Context, in *ListAttestationPoliciesRequest, opts ...grpc.CallOption) (*ListAttestationPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttestationPoliciesResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_ListAttestationPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) AddAPBinding(ctx context.Context, in *AddAPBindingRequest, opts ...grpc.CallOption) (*AddAPBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAPBindingResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_AddAPBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) DestroyAPBinding(ctx context.Context, in *DestroyAPBindingRequest, opts ...grpc.CallOption) (*DestroyAPBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyAPBindingResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_DestroyAPBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) ListAPBindings(ctx context.Context, in *ListAPBindingsRequest, opts ...grpc.CallOption) (*ListAPBindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPBindingsResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_ListAPBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) AddFederation(ctx context.Context, in *AddFederationRequest, opts ...grpc.CallOption) (*AddFederationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFederationResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_AddFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) DestroyFederation(ctx context.Context, in *DestroyFederationRequest, opts ...grpc.CallOption) (*DestroyFederationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyFederationResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_DestroyFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataSourcePluginServiceClient) ListFederations(ctx context.Context, in *ListFederationsRequest, opts ...grpc.CallOption) (*ListFederationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFederationsResponse)
	err := c.cc.Invoke(ctx, DataSourcePluginService_ListFederations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataSourcePluginServiceServer is the server API for DataSourcePluginService service.
// All implementations should embed UnimplementedDataSourcePluginServiceServer
// for forward compatibility.
type DataSourcePluginServiceServer interface {
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	AddTrustZone(context.Context, *AddTrustZoneRequest) (*AddTrustZoneResponse, error)
	DestroyTrustZone(context.Context, *DestroyTrustZoneRequest) (*DestroyTrustZoneResponse, error)
	GetTrustZone(context.Context, *GetTrustZoneRequest) (*GetTrustZoneResponse, error)
	GetTrustZoneByName(context.Context, *GetTrustZoneByNameRequest) (*GetTrustZoneByNameResponse, error)
	ListTrustZones(context.Context, *ListTrustZonesRequest) (*ListTrustZonesResponse, error)
	UpdateTrustZone(context.Context, *UpdateTrustZoneRequest) (*UpdateTrustZoneResponse, error)
	AddCluster(context.Context, *AddClusterRequest) (*AddClusterResponse, error)
	DestroyCluster(context.Context, *DestroyClusterRequest) (*DestroyClusterResponse, error)
	GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)
	AddAttestationPolicy(context.Context, *AddAttestationPolicyRequest) (*AddAttestationPolicyResponse, error)
	DestroyAttestationPolicy(context.Context, *DestroyAttestationPolicyRequest) (*DestroyAttestationPolicyResponse, error)
	GetAttestationPolicy(context.Context, *GetAttestationPolicyRequest) (*GetAttestationPolicyResponse, error)
	ListAttestationPolicies(context.Context, *ListAttestationPoliciesRequest) (*ListAttestationPoliciesResponse, error)
	AddAPBinding(context.Context, *AddAPBindingRequest) (*AddAPBindingResponse, error)
	DestroyAPBinding(context.Context, *DestroyAPBindingRequest) (*DestroyAPBindingResponse, error)
	ListAPBindings(context.Context, *ListAPBindingsRequest) (*ListAPBindingsResponse, error)
	AddFederation(context.Context, *AddFederationRequest) (*AddFederationResponse, error)
	DestroyFederation(context.Context, *DestroyFederationRequest) (*DestroyFederationResponse, error)
	ListFederations(context.Context, *ListFederationsRequest) (*ListFederationsResponse, error)
}

// UnimplementedDataSourcePluginServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataSourcePluginServiceServer struct{}

func (UnimplementedDataSourcePluginServiceServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) AddTrustZone(context.Context, *AddTrustZoneRequest) (*AddTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrustZone not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) DestroyTrustZone(context.Context, *DestroyTrustZoneRequest) (*DestroyTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTrustZone not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) GetTrustZone(context.Context, *GetTrustZoneRequest) (*GetTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustZone not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) GetTrustZoneByName(context.Context, *GetTrustZoneByNameRequest) (*GetTrustZoneByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustZoneByName not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) ListTrustZones(context.Context, *ListTrustZonesRequest) (*ListTrustZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustZones not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) UpdateTrustZone(context.Context, *UpdateTrustZoneRequest) (*UpdateTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustZone not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) AddCluster(context.Context, *AddClusterRequest) (*AddClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCluster not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) DestroyCluster(context.Context, *DestroyClusterRequest) (*DestroyClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyCluster not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) AddAttestationPolicy(context.Context, *AddAttestationPolicyRequest) (*AddAttestationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttestationPolicy not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) DestroyAttestationPolicy(context.Context, *DestroyAttestationPolicyRequest) (*DestroyAttestationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAttestationPolicy not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) GetAttestationPolicy(context.Context, *GetAttestationPolicyRequest) (*GetAttestationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttestationPolicy not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) ListAttestationPolicies(context.Context, *ListAttestationPoliciesRequest) (*ListAttestationPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttestationPolicies not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) AddAPBinding(context.Context, *AddAPBindingRequest) (*AddAPBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAPBinding not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) DestroyAPBinding(context.Context, *DestroyAPBindingRequest) (*DestroyAPBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAPBinding not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) ListAPBindings(context.Context, *ListAPBindingsRequest) (*ListAPBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPBindings not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) AddFederation(context.Context, *AddFederationRequest) (*AddFederationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFederation not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) DestroyFederation(context.Context, *DestroyFederationRequest) (*DestroyFederationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyFederation not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) ListFederations(context.Context, *ListFederationsRequest) (*ListFederationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFederations not implemented")
}
func (UnimplementedDataSourcePluginServiceServer) testEmbeddedByValue() {}

// UnsafeDataSourcePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataSourcePluginServiceServer will
// result in compilation errors.
type UnsafeDataSourcePluginServiceServer interface {
	mustEmbedUnimplementedDataSourcePluginServiceServer()
}

func RegisterDataSourcePluginServiceServer(s grpc.ServiceRegistrar, srv DataSourcePluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataSourcePluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataSourcePluginService_ServiceDesc, srv)
}

func _DataSourcePluginService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_AddTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).AddTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_AddTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).AddTrustZone(ctx, req.(*AddTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_DestroyTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).DestroyTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_DestroyTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).DestroyTrustZone(ctx, req.(*DestroyTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_GetTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).GetTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_GetTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).GetTrustZone(ctx, req.(*GetTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_GetTrustZoneByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustZoneByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).GetTrustZoneByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_GetTrustZoneByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).GetTrustZoneByName(ctx, req.(*GetTrustZoneByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_ListTrustZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrustZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).ListTrustZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_ListTrustZones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).ListTrustZones(ctx, req.(*ListTrustZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_UpdateTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).UpdateTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_UpdateTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).UpdateTrustZone(ctx, req.(*UpdateTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_AddCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).AddCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_AddCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).AddCluster(ctx, req.(*AddClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_DestroyCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).DestroyCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_DestroyCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).DestroyCluster(ctx, req.(*DestroyClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_AddAttestationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttestationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).AddAttestationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_AddAttestationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).AddAttestationPolicy(ctx, req.(*AddAttestationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_DestroyAttestationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAttestationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).DestroyAttestationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_DestroyAttestationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).DestroyAttestationPolicy(ctx, req.(*DestroyAttestationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_GetAttestationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttestationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).GetAttestationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_GetAttestationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).GetAttestationPolicy(ctx, req.(*GetAttestationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_ListAttestationPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttestationPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).ListAttestationPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_ListAttestationPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).ListAttestationPolicies(ctx, req.(*ListAttestationPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_AddAPBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAPBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).AddAPBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_AddAPBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).AddAPBinding(ctx, req.(*AddAPBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_DestroyAPBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAPBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).DestroyAPBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_DestroyAPBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).DestroyAPBinding(ctx, req.(*DestroyAPBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_ListAPBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).ListAPBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_ListAPBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).ListAPBindings(ctx, req.(*ListAPBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_AddFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFederationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).AddFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_AddFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).AddFederation(ctx, req.(*AddFederationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_DestroyFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyFederationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).DestroyFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_DestroyFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).DestroyFederation(ctx, req.(*DestroyFederationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataSourcePluginService_ListFederations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataSourcePluginServiceServer).ListFederations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataSourcePluginService_ListFederations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataSourcePluginServiceServer).ListFederations(ctx, req.(*ListFederationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataSourcePluginService_ServiceDesc is the grpc.ServiceDesc for DataSourcePluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataSourcePluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.cofidectl_plugin.v1alpha2.DataSourcePluginService",
	HandlerType: (*DataSourcePluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _DataSourcePluginService_Validate_Handler,
		},
		{
			MethodName: "AddTrustZone",
			Handler:    _DataSourcePluginService_AddTrustZone_Handler,
		},
		{
			MethodName: "DestroyTrustZone",
			Handler:    _DataSourcePluginService_DestroyTrustZone_Handler,
		},
		{
			MethodName: "GetTrustZone",
			Handler:    _DataSourcePluginService_GetTrustZone_Handler,
		},
		{
			MethodName: "GetTrustZoneByName",
			Handler:    _DataSourcePluginService_GetTrustZoneByName_Handler,
		},
		{
			MethodName: "ListTrustZones",
			Handler:    _DataSourcePluginService_ListTrustZones_Handler,
		},
		{
			MethodName: "UpdateTrustZone",
			Handler:    _DataSourcePluginService_UpdateTrustZone_Handler,
		},
		{
			MethodName: "AddCluster",
			Handler:    _DataSourcePluginService_AddCluster_Handler,
		},
		{
			MethodName: "DestroyCluster",
			Handler:    _DataSourcePluginService_DestroyCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _DataSourcePluginService_GetCluster_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _DataSourcePluginService_ListClusters_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _DataSourcePluginService_UpdateCluster_Handler,
		},
		{
			MethodName: "AddAttestationPolicy",
			Handler:    _DataSourcePluginService_AddAttestationPolicy_Handler,
		},
		{
			MethodName: "DestroyAttestationPolicy",
			Handler:    _DataSourcePluginService_DestroyAttestationPolicy_Handler,
		},
		{
			MethodName: "GetAttestationPolicy",
			Handler:    _DataSourcePluginService_GetAttestationPolicy_Handler,
		},
		{
			MethodName: "ListAttestationPolicies",
			Handler:    _DataSourcePluginService_ListAttestationPolicies_Handler,
		},
		{
			MethodName: "AddAPBinding",
			Handler:    _DataSourcePluginService_AddAPBinding_Handler,
		},
		{
			MethodName: "DestroyAPBinding",
			Handler:    _DataSourcePluginService_DestroyAPBinding_Handler,
		},
		{
			MethodName: "ListAPBindings",
			Handler:    _DataSourcePluginService_ListAPBindings_Handler,
		},
		{
			MethodName: "AddFederation",
			Handler:    _DataSourcePluginService_AddFederation_Handler,
		},
		{
			MethodName: "DestroyFederation",
			Handler:    _DataSourcePluginService_DestroyFederation_Handler,
		},
		{
			MethodName: "ListFederations",
			Handler:    _DataSourcePluginService_ListFederations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cofidectl_plugin/v1alpha2/plugin.proto",
}
