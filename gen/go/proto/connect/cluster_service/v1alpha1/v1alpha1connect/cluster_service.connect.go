// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/cluster_service/v1alpha1/cluster_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/cluster_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "proto.connect.cluster_service.v1alpha1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceCreateClusterProcedure is the fully-qualified name of the ClusterService's
	// CreateCluster RPC.
	ClusterServiceCreateClusterProcedure = "/proto.connect.cluster_service.v1alpha1.ClusterService/CreateCluster"
	// ClusterServiceDestroyClusterProcedure is the fully-qualified name of the ClusterService's
	// DestroyCluster RPC.
	ClusterServiceDestroyClusterProcedure = "/proto.connect.cluster_service.v1alpha1.ClusterService/DestroyCluster"
	// ClusterServiceGetClusterProcedure is the fully-qualified name of the ClusterService's GetCluster
	// RPC.
	ClusterServiceGetClusterProcedure = "/proto.connect.cluster_service.v1alpha1.ClusterService/GetCluster"
	// ClusterServiceListClustersProcedure is the fully-qualified name of the ClusterService's
	// ListClusters RPC.
	ClusterServiceListClustersProcedure = "/proto.connect.cluster_service.v1alpha1.ClusterService/ListClusters"
	// ClusterServiceUpdateClusterProcedure is the fully-qualified name of the ClusterService's
	// UpdateCluster RPC.
	ClusterServiceUpdateClusterProcedure = "/proto.connect.cluster_service.v1alpha1.ClusterService/UpdateCluster"
)

// ClusterServiceClient is a client for the proto.connect.cluster_service.v1alpha1.ClusterService
// service.
type ClusterServiceClient interface {
	CreateCluster(context.Context, *connect.Request[v1alpha1.CreateClusterRequest]) (*connect.Response[v1alpha1.CreateClusterResponse], error)
	DestroyCluster(context.Context, *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error)
	GetCluster(context.Context, *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error)
	UpdateCluster(context.Context, *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error)
}

// NewClusterServiceClient constructs a client for the
// proto.connect.cluster_service.v1alpha1.ClusterService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterServiceMethods := v1alpha1.File_proto_connect_cluster_service_v1alpha1_cluster_service_proto.Services().ByName("ClusterService").Methods()
	return &clusterServiceClient{
		createCluster: connect.NewClient[v1alpha1.CreateClusterRequest, v1alpha1.CreateClusterResponse](
			httpClient,
			baseURL+ClusterServiceCreateClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("CreateCluster")),
			connect.WithClientOptions(opts...),
		),
		destroyCluster: connect.NewClient[v1alpha1.DestroyClusterRequest, v1alpha1.DestroyClusterResponse](
			httpClient,
			baseURL+ClusterServiceDestroyClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("DestroyCluster")),
			connect.WithClientOptions(opts...),
		),
		getCluster: connect.NewClient[v1alpha1.GetClusterRequest, v1alpha1.GetClusterResponse](
			httpClient,
			baseURL+ClusterServiceGetClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
			connect.WithClientOptions(opts...),
		),
		listClusters: connect.NewClient[v1alpha1.ListClustersRequest, v1alpha1.ListClustersResponse](
			httpClient,
			baseURL+ClusterServiceListClustersProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
			connect.WithClientOptions(opts...),
		),
		updateCluster: connect.NewClient[v1alpha1.UpdateClusterRequest, v1alpha1.UpdateClusterResponse](
			httpClient,
			baseURL+ClusterServiceUpdateClusterProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("UpdateCluster")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	createCluster  *connect.Client[v1alpha1.CreateClusterRequest, v1alpha1.CreateClusterResponse]
	destroyCluster *connect.Client[v1alpha1.DestroyClusterRequest, v1alpha1.DestroyClusterResponse]
	getCluster     *connect.Client[v1alpha1.GetClusterRequest, v1alpha1.GetClusterResponse]
	listClusters   *connect.Client[v1alpha1.ListClustersRequest, v1alpha1.ListClustersResponse]
	updateCluster  *connect.Client[v1alpha1.UpdateClusterRequest, v1alpha1.UpdateClusterResponse]
}

// CreateCluster calls proto.connect.cluster_service.v1alpha1.ClusterService.CreateCluster.
func (c *clusterServiceClient) CreateCluster(ctx context.Context, req *connect.Request[v1alpha1.CreateClusterRequest]) (*connect.Response[v1alpha1.CreateClusterResponse], error) {
	return c.createCluster.CallUnary(ctx, req)
}

// DestroyCluster calls proto.connect.cluster_service.v1alpha1.ClusterService.DestroyCluster.
func (c *clusterServiceClient) DestroyCluster(ctx context.Context, req *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error) {
	return c.destroyCluster.CallUnary(ctx, req)
}

// GetCluster calls proto.connect.cluster_service.v1alpha1.ClusterService.GetCluster.
func (c *clusterServiceClient) GetCluster(ctx context.Context, req *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error) {
	return c.getCluster.CallUnary(ctx, req)
}

// ListClusters calls proto.connect.cluster_service.v1alpha1.ClusterService.ListClusters.
func (c *clusterServiceClient) ListClusters(ctx context.Context, req *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error) {
	return c.listClusters.CallUnary(ctx, req)
}

// UpdateCluster calls proto.connect.cluster_service.v1alpha1.ClusterService.UpdateCluster.
func (c *clusterServiceClient) UpdateCluster(ctx context.Context, req *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error) {
	return c.updateCluster.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the
// proto.connect.cluster_service.v1alpha1.ClusterService service.
type ClusterServiceHandler interface {
	CreateCluster(context.Context, *connect.Request[v1alpha1.CreateClusterRequest]) (*connect.Response[v1alpha1.CreateClusterResponse], error)
	DestroyCluster(context.Context, *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error)
	GetCluster(context.Context, *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error)
	ListClusters(context.Context, *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error)
	UpdateCluster(context.Context, *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceMethods := v1alpha1.File_proto_connect_cluster_service_v1alpha1_cluster_service_proto.Services().ByName("ClusterService").Methods()
	clusterServiceCreateClusterHandler := connect.NewUnaryHandler(
		ClusterServiceCreateClusterProcedure,
		svc.CreateCluster,
		connect.WithSchema(clusterServiceMethods.ByName("CreateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDestroyClusterHandler := connect.NewUnaryHandler(
		ClusterServiceDestroyClusterProcedure,
		svc.DestroyCluster,
		connect.WithSchema(clusterServiceMethods.ByName("DestroyCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceGetClusterHandler := connect.NewUnaryHandler(
		ClusterServiceGetClusterProcedure,
		svc.GetCluster,
		connect.WithSchema(clusterServiceMethods.ByName("GetCluster")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceListClustersHandler := connect.NewUnaryHandler(
		ClusterServiceListClustersProcedure,
		svc.ListClusters,
		connect.WithSchema(clusterServiceMethods.ByName("ListClusters")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceUpdateClusterHandler := connect.NewUnaryHandler(
		ClusterServiceUpdateClusterProcedure,
		svc.UpdateCluster,
		connect.WithSchema(clusterServiceMethods.ByName("UpdateCluster")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.cluster_service.v1alpha1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceCreateClusterProcedure:
			clusterServiceCreateClusterHandler.ServeHTTP(w, r)
		case ClusterServiceDestroyClusterProcedure:
			clusterServiceDestroyClusterHandler.ServeHTTP(w, r)
		case ClusterServiceGetClusterProcedure:
			clusterServiceGetClusterHandler.ServeHTTP(w, r)
		case ClusterServiceListClustersProcedure:
			clusterServiceListClustersHandler.ServeHTTP(w, r)
		case ClusterServiceUpdateClusterProcedure:
			clusterServiceUpdateClusterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) CreateCluster(context.Context, *connect.Request[v1alpha1.CreateClusterRequest]) (*connect.Response[v1alpha1.CreateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.cluster_service.v1alpha1.ClusterService.CreateCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) DestroyCluster(context.Context, *connect.Request[v1alpha1.DestroyClusterRequest]) (*connect.Response[v1alpha1.DestroyClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.cluster_service.v1alpha1.ClusterService.DestroyCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetCluster(context.Context, *connect.Request[v1alpha1.GetClusterRequest]) (*connect.Response[v1alpha1.GetClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.cluster_service.v1alpha1.ClusterService.GetCluster is not implemented"))
}

func (UnimplementedClusterServiceHandler) ListClusters(context.Context, *connect.Request[v1alpha1.ListClustersRequest]) (*connect.Response[v1alpha1.ListClustersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.cluster_service.v1alpha1.ClusterService.ListClusters is not implemented"))
}

func (UnimplementedClusterServiceHandler) UpdateCluster(context.Context, *connect.Request[v1alpha1.UpdateClusterRequest]) (*connect.Response[v1alpha1.UpdateClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.cluster_service.v1alpha1.ClusterService.UpdateCluster is not implemented"))
}
