// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/connect/ap_binding_service/v1alpha1/ap_binding_service.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	APBindingService_CreateAPBinding_FullMethodName  = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/CreateAPBinding"
	APBindingService_DestroyAPBinding_FullMethodName = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/DestroyAPBinding"
	APBindingService_GetAPBinding_FullMethodName     = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/GetAPBinding"
	APBindingService_ListAPBindings_FullMethodName   = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/ListAPBindings"
	APBindingService_UpdateAPBinding_FullMethodName  = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/UpdateAPBinding"
)

// APBindingServiceClient is the client API for APBindingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APBindingServiceClient interface {
	CreateAPBinding(ctx context.Context, in *CreateAPBindingRequest, opts ...grpc.CallOption) (*CreateAPBindingResponse, error)
	DestroyAPBinding(ctx context.Context, in *DestroyAPBindingRequest, opts ...grpc.CallOption) (*DestroyAPBindingResponse, error)
	GetAPBinding(ctx context.Context, in *GetAPBindingRequest, opts ...grpc.CallOption) (*GetAPBindingResponse, error)
	ListAPBindings(ctx context.Context, in *ListAPBindingsRequest, opts ...grpc.CallOption) (*ListAPBindingsResponse, error)
	UpdateAPBinding(ctx context.Context, in *UpdateAPBindingRequest, opts ...grpc.CallOption) (*UpdateAPBindingResponse, error)
}

type aPBindingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPBindingServiceClient(cc grpc.ClientConnInterface) APBindingServiceClient {
	return &aPBindingServiceClient{cc}
}

func (c *aPBindingServiceClient) CreateAPBinding(ctx context.Context, in *CreateAPBindingRequest, opts ...grpc.CallOption) (*CreateAPBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAPBindingResponse)
	err := c.cc.Invoke(ctx, APBindingService_CreateAPBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPBindingServiceClient) DestroyAPBinding(ctx context.Context, in *DestroyAPBindingRequest, opts ...grpc.CallOption) (*DestroyAPBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyAPBindingResponse)
	err := c.cc.Invoke(ctx, APBindingService_DestroyAPBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPBindingServiceClient) GetAPBinding(ctx context.Context, in *GetAPBindingRequest, opts ...grpc.CallOption) (*GetAPBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAPBindingResponse)
	err := c.cc.Invoke(ctx, APBindingService_GetAPBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPBindingServiceClient) ListAPBindings(ctx context.Context, in *ListAPBindingsRequest, opts ...grpc.CallOption) (*ListAPBindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPBindingsResponse)
	err := c.cc.Invoke(ctx, APBindingService_ListAPBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPBindingServiceClient) UpdateAPBinding(ctx context.Context, in *UpdateAPBindingRequest, opts ...grpc.CallOption) (*UpdateAPBindingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAPBindingResponse)
	err := c.cc.Invoke(ctx, APBindingService_UpdateAPBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APBindingServiceServer is the server API for APBindingService service.
// All implementations should embed UnimplementedAPBindingServiceServer
// for forward compatibility.
type APBindingServiceServer interface {
	CreateAPBinding(context.Context, *CreateAPBindingRequest) (*CreateAPBindingResponse, error)
	DestroyAPBinding(context.Context, *DestroyAPBindingRequest) (*DestroyAPBindingResponse, error)
	GetAPBinding(context.Context, *GetAPBindingRequest) (*GetAPBindingResponse, error)
	ListAPBindings(context.Context, *ListAPBindingsRequest) (*ListAPBindingsResponse, error)
	UpdateAPBinding(context.Context, *UpdateAPBindingRequest) (*UpdateAPBindingResponse, error)
}

// UnimplementedAPBindingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPBindingServiceServer struct{}

func (UnimplementedAPBindingServiceServer) CreateAPBinding(context.Context, *CreateAPBindingRequest) (*CreateAPBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPBinding not implemented")
}
func (UnimplementedAPBindingServiceServer) DestroyAPBinding(context.Context, *DestroyAPBindingRequest) (*DestroyAPBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAPBinding not implemented")
}
func (UnimplementedAPBindingServiceServer) GetAPBinding(context.Context, *GetAPBindingRequest) (*GetAPBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPBinding not implemented")
}
func (UnimplementedAPBindingServiceServer) ListAPBindings(context.Context, *ListAPBindingsRequest) (*ListAPBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPBindings not implemented")
}
func (UnimplementedAPBindingServiceServer) UpdateAPBinding(context.Context, *UpdateAPBindingRequest) (*UpdateAPBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPBinding not implemented")
}
func (UnimplementedAPBindingServiceServer) testEmbeddedByValue() {}

// UnsafeAPBindingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APBindingServiceServer will
// result in compilation errors.
type UnsafeAPBindingServiceServer interface {
	mustEmbedUnimplementedAPBindingServiceServer()
}

func RegisterAPBindingServiceServer(s grpc.ServiceRegistrar, srv APBindingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAPBindingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&APBindingService_ServiceDesc, srv)
}

func _APBindingService_CreateAPBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APBindingServiceServer).CreateAPBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APBindingService_CreateAPBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APBindingServiceServer).CreateAPBinding(ctx, req.(*CreateAPBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APBindingService_DestroyAPBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAPBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APBindingServiceServer).DestroyAPBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APBindingService_DestroyAPBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APBindingServiceServer).DestroyAPBinding(ctx, req.(*DestroyAPBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APBindingService_GetAPBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APBindingServiceServer).GetAPBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APBindingService_GetAPBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APBindingServiceServer).GetAPBinding(ctx, req.(*GetAPBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APBindingService_ListAPBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APBindingServiceServer).ListAPBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APBindingService_ListAPBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APBindingServiceServer).ListAPBindings(ctx, req.(*ListAPBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APBindingService_UpdateAPBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APBindingServiceServer).UpdateAPBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APBindingService_UpdateAPBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APBindingServiceServer).UpdateAPBinding(ctx, req.(*UpdateAPBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APBindingService_ServiceDesc is the grpc.ServiceDesc for APBindingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APBindingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.connect.ap_binding_service.v1alpha1.APBindingService",
	HandlerType: (*APBindingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAPBinding",
			Handler:    _APBindingService_CreateAPBinding_Handler,
		},
		{
			MethodName: "DestroyAPBinding",
			Handler:    _APBindingService_DestroyAPBinding_Handler,
		},
		{
			MethodName: "GetAPBinding",
			Handler:    _APBindingService_GetAPBinding_Handler,
		},
		{
			MethodName: "ListAPBindings",
			Handler:    _APBindingService_ListAPBindings_Handler,
		},
		{
			MethodName: "UpdateAPBinding",
			Handler:    _APBindingService_UpdateAPBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connect/ap_binding_service/v1alpha1/ap_binding_service.proto",
}
