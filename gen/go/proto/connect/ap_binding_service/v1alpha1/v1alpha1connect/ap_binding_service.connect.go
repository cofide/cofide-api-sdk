// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/ap_binding_service/v1alpha1/ap_binding_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/ap_binding_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// APBindingServiceName is the fully-qualified name of the APBindingService service.
	APBindingServiceName = "proto.connect.ap_binding_service.v1alpha1.APBindingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APBindingServiceCreateAPBindingProcedure is the fully-qualified name of the APBindingService's
	// CreateAPBinding RPC.
	APBindingServiceCreateAPBindingProcedure = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/CreateAPBinding"
	// APBindingServiceDestroyAPBindingProcedure is the fully-qualified name of the APBindingService's
	// DestroyAPBinding RPC.
	APBindingServiceDestroyAPBindingProcedure = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/DestroyAPBinding"
	// APBindingServiceGetAPBindingProcedure is the fully-qualified name of the APBindingService's
	// GetAPBinding RPC.
	APBindingServiceGetAPBindingProcedure = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/GetAPBinding"
	// APBindingServiceListAPBindingsProcedure is the fully-qualified name of the APBindingService's
	// ListAPBindings RPC.
	APBindingServiceListAPBindingsProcedure = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/ListAPBindings"
	// APBindingServiceUpdateAPBindingProcedure is the fully-qualified name of the APBindingService's
	// UpdateAPBinding RPC.
	APBindingServiceUpdateAPBindingProcedure = "/proto.connect.ap_binding_service.v1alpha1.APBindingService/UpdateAPBinding"
)

// APBindingServiceClient is a client for the
// proto.connect.ap_binding_service.v1alpha1.APBindingService service.
type APBindingServiceClient interface {
	CreateAPBinding(context.Context, *connect.Request[v1alpha1.CreateAPBindingRequest]) (*connect.Response[v1alpha1.CreateAPBindingResponse], error)
	DestroyAPBinding(context.Context, *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error)
	GetAPBinding(context.Context, *connect.Request[v1alpha1.GetAPBindingRequest]) (*connect.Response[v1alpha1.GetAPBindingResponse], error)
	ListAPBindings(context.Context, *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error)
	UpdateAPBinding(context.Context, *connect.Request[v1alpha1.UpdateAPBindingRequest]) (*connect.Response[v1alpha1.UpdateAPBindingResponse], error)
}

// NewAPBindingServiceClient constructs a client for the
// proto.connect.ap_binding_service.v1alpha1.APBindingService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPBindingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) APBindingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aPBindingServiceMethods := v1alpha1.File_proto_connect_ap_binding_service_v1alpha1_ap_binding_service_proto.Services().ByName("APBindingService").Methods()
	return &aPBindingServiceClient{
		createAPBinding: connect.NewClient[v1alpha1.CreateAPBindingRequest, v1alpha1.CreateAPBindingResponse](
			httpClient,
			baseURL+APBindingServiceCreateAPBindingProcedure,
			connect.WithSchema(aPBindingServiceMethods.ByName("CreateAPBinding")),
			connect.WithClientOptions(opts...),
		),
		destroyAPBinding: connect.NewClient[v1alpha1.DestroyAPBindingRequest, v1alpha1.DestroyAPBindingResponse](
			httpClient,
			baseURL+APBindingServiceDestroyAPBindingProcedure,
			connect.WithSchema(aPBindingServiceMethods.ByName("DestroyAPBinding")),
			connect.WithClientOptions(opts...),
		),
		getAPBinding: connect.NewClient[v1alpha1.GetAPBindingRequest, v1alpha1.GetAPBindingResponse](
			httpClient,
			baseURL+APBindingServiceGetAPBindingProcedure,
			connect.WithSchema(aPBindingServiceMethods.ByName("GetAPBinding")),
			connect.WithClientOptions(opts...),
		),
		listAPBindings: connect.NewClient[v1alpha1.ListAPBindingsRequest, v1alpha1.ListAPBindingsResponse](
			httpClient,
			baseURL+APBindingServiceListAPBindingsProcedure,
			connect.WithSchema(aPBindingServiceMethods.ByName("ListAPBindings")),
			connect.WithClientOptions(opts...),
		),
		updateAPBinding: connect.NewClient[v1alpha1.UpdateAPBindingRequest, v1alpha1.UpdateAPBindingResponse](
			httpClient,
			baseURL+APBindingServiceUpdateAPBindingProcedure,
			connect.WithSchema(aPBindingServiceMethods.ByName("UpdateAPBinding")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aPBindingServiceClient implements APBindingServiceClient.
type aPBindingServiceClient struct {
	createAPBinding  *connect.Client[v1alpha1.CreateAPBindingRequest, v1alpha1.CreateAPBindingResponse]
	destroyAPBinding *connect.Client[v1alpha1.DestroyAPBindingRequest, v1alpha1.DestroyAPBindingResponse]
	getAPBinding     *connect.Client[v1alpha1.GetAPBindingRequest, v1alpha1.GetAPBindingResponse]
	listAPBindings   *connect.Client[v1alpha1.ListAPBindingsRequest, v1alpha1.ListAPBindingsResponse]
	updateAPBinding  *connect.Client[v1alpha1.UpdateAPBindingRequest, v1alpha1.UpdateAPBindingResponse]
}

// CreateAPBinding calls proto.connect.ap_binding_service.v1alpha1.APBindingService.CreateAPBinding.
func (c *aPBindingServiceClient) CreateAPBinding(ctx context.Context, req *connect.Request[v1alpha1.CreateAPBindingRequest]) (*connect.Response[v1alpha1.CreateAPBindingResponse], error) {
	return c.createAPBinding.CallUnary(ctx, req)
}

// DestroyAPBinding calls
// proto.connect.ap_binding_service.v1alpha1.APBindingService.DestroyAPBinding.
func (c *aPBindingServiceClient) DestroyAPBinding(ctx context.Context, req *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error) {
	return c.destroyAPBinding.CallUnary(ctx, req)
}

// GetAPBinding calls proto.connect.ap_binding_service.v1alpha1.APBindingService.GetAPBinding.
func (c *aPBindingServiceClient) GetAPBinding(ctx context.Context, req *connect.Request[v1alpha1.GetAPBindingRequest]) (*connect.Response[v1alpha1.GetAPBindingResponse], error) {
	return c.getAPBinding.CallUnary(ctx, req)
}

// ListAPBindings calls proto.connect.ap_binding_service.v1alpha1.APBindingService.ListAPBindings.
func (c *aPBindingServiceClient) ListAPBindings(ctx context.Context, req *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error) {
	return c.listAPBindings.CallUnary(ctx, req)
}

// UpdateAPBinding calls proto.connect.ap_binding_service.v1alpha1.APBindingService.UpdateAPBinding.
func (c *aPBindingServiceClient) UpdateAPBinding(ctx context.Context, req *connect.Request[v1alpha1.UpdateAPBindingRequest]) (*connect.Response[v1alpha1.UpdateAPBindingResponse], error) {
	return c.updateAPBinding.CallUnary(ctx, req)
}

// APBindingServiceHandler is an implementation of the
// proto.connect.ap_binding_service.v1alpha1.APBindingService service.
type APBindingServiceHandler interface {
	CreateAPBinding(context.Context, *connect.Request[v1alpha1.CreateAPBindingRequest]) (*connect.Response[v1alpha1.CreateAPBindingResponse], error)
	DestroyAPBinding(context.Context, *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error)
	GetAPBinding(context.Context, *connect.Request[v1alpha1.GetAPBindingRequest]) (*connect.Response[v1alpha1.GetAPBindingResponse], error)
	ListAPBindings(context.Context, *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error)
	UpdateAPBinding(context.Context, *connect.Request[v1alpha1.UpdateAPBindingRequest]) (*connect.Response[v1alpha1.UpdateAPBindingResponse], error)
}

// NewAPBindingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPBindingServiceHandler(svc APBindingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aPBindingServiceMethods := v1alpha1.File_proto_connect_ap_binding_service_v1alpha1_ap_binding_service_proto.Services().ByName("APBindingService").Methods()
	aPBindingServiceCreateAPBindingHandler := connect.NewUnaryHandler(
		APBindingServiceCreateAPBindingProcedure,
		svc.CreateAPBinding,
		connect.WithSchema(aPBindingServiceMethods.ByName("CreateAPBinding")),
		connect.WithHandlerOptions(opts...),
	)
	aPBindingServiceDestroyAPBindingHandler := connect.NewUnaryHandler(
		APBindingServiceDestroyAPBindingProcedure,
		svc.DestroyAPBinding,
		connect.WithSchema(aPBindingServiceMethods.ByName("DestroyAPBinding")),
		connect.WithHandlerOptions(opts...),
	)
	aPBindingServiceGetAPBindingHandler := connect.NewUnaryHandler(
		APBindingServiceGetAPBindingProcedure,
		svc.GetAPBinding,
		connect.WithSchema(aPBindingServiceMethods.ByName("GetAPBinding")),
		connect.WithHandlerOptions(opts...),
	)
	aPBindingServiceListAPBindingsHandler := connect.NewUnaryHandler(
		APBindingServiceListAPBindingsProcedure,
		svc.ListAPBindings,
		connect.WithSchema(aPBindingServiceMethods.ByName("ListAPBindings")),
		connect.WithHandlerOptions(opts...),
	)
	aPBindingServiceUpdateAPBindingHandler := connect.NewUnaryHandler(
		APBindingServiceUpdateAPBindingProcedure,
		svc.UpdateAPBinding,
		connect.WithSchema(aPBindingServiceMethods.ByName("UpdateAPBinding")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.ap_binding_service.v1alpha1.APBindingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APBindingServiceCreateAPBindingProcedure:
			aPBindingServiceCreateAPBindingHandler.ServeHTTP(w, r)
		case APBindingServiceDestroyAPBindingProcedure:
			aPBindingServiceDestroyAPBindingHandler.ServeHTTP(w, r)
		case APBindingServiceGetAPBindingProcedure:
			aPBindingServiceGetAPBindingHandler.ServeHTTP(w, r)
		case APBindingServiceListAPBindingsProcedure:
			aPBindingServiceListAPBindingsHandler.ServeHTTP(w, r)
		case APBindingServiceUpdateAPBindingProcedure:
			aPBindingServiceUpdateAPBindingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPBindingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPBindingServiceHandler struct{}

func (UnimplementedAPBindingServiceHandler) CreateAPBinding(context.Context, *connect.Request[v1alpha1.CreateAPBindingRequest]) (*connect.Response[v1alpha1.CreateAPBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.ap_binding_service.v1alpha1.APBindingService.CreateAPBinding is not implemented"))
}

func (UnimplementedAPBindingServiceHandler) DestroyAPBinding(context.Context, *connect.Request[v1alpha1.DestroyAPBindingRequest]) (*connect.Response[v1alpha1.DestroyAPBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.ap_binding_service.v1alpha1.APBindingService.DestroyAPBinding is not implemented"))
}

func (UnimplementedAPBindingServiceHandler) GetAPBinding(context.Context, *connect.Request[v1alpha1.GetAPBindingRequest]) (*connect.Response[v1alpha1.GetAPBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.ap_binding_service.v1alpha1.APBindingService.GetAPBinding is not implemented"))
}

func (UnimplementedAPBindingServiceHandler) ListAPBindings(context.Context, *connect.Request[v1alpha1.ListAPBindingsRequest]) (*connect.Response[v1alpha1.ListAPBindingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.ap_binding_service.v1alpha1.APBindingService.ListAPBindings is not implemented"))
}

func (UnimplementedAPBindingServiceHandler) UpdateAPBinding(context.Context, *connect.Request[v1alpha1.UpdateAPBindingRequest]) (*connect.Response[v1alpha1.UpdateAPBindingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.ap_binding_service.v1alpha1.APBindingService.UpdateAPBinding is not implemented"))
}
