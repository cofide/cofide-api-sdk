// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/federation_service/v1alpha1/federation_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/federation_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FederationServiceName is the fully-qualified name of the FederationService service.
	FederationServiceName = "proto.connect.federation_service.v1alpha1.FederationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FederationServiceCreateFederationProcedure is the fully-qualified name of the FederationService's
	// CreateFederation RPC.
	FederationServiceCreateFederationProcedure = "/proto.connect.federation_service.v1alpha1.FederationService/CreateFederation"
	// FederationServiceDestroyFederationProcedure is the fully-qualified name of the
	// FederationService's DestroyFederation RPC.
	FederationServiceDestroyFederationProcedure = "/proto.connect.federation_service.v1alpha1.FederationService/DestroyFederation"
	// FederationServiceListFederationsProcedure is the fully-qualified name of the FederationService's
	// ListFederations RPC.
	FederationServiceListFederationsProcedure = "/proto.connect.federation_service.v1alpha1.FederationService/ListFederations"
	// FederationServiceGetFederationProcedure is the fully-qualified name of the FederationService's
	// GetFederation RPC.
	FederationServiceGetFederationProcedure = "/proto.connect.federation_service.v1alpha1.FederationService/GetFederation"
)

// FederationServiceClient is a client for the
// proto.connect.federation_service.v1alpha1.FederationService service.
type FederationServiceClient interface {
	CreateFederation(context.Context, *connect.Request[v1alpha1.CreateFederationRequest]) (*connect.Response[v1alpha1.CreateFederationResponse], error)
	DestroyFederation(context.Context, *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error)
	ListFederations(context.Context, *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error)
	GetFederation(context.Context, *connect.Request[v1alpha1.GetFederationRequest]) (*connect.Response[v1alpha1.GetFederationResponse], error)
}

// NewFederationServiceClient constructs a client for the
// proto.connect.federation_service.v1alpha1.FederationService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFederationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FederationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	federationServiceMethods := v1alpha1.File_proto_connect_federation_service_v1alpha1_federation_service_proto.Services().ByName("FederationService").Methods()
	return &federationServiceClient{
		createFederation: connect.NewClient[v1alpha1.CreateFederationRequest, v1alpha1.CreateFederationResponse](
			httpClient,
			baseURL+FederationServiceCreateFederationProcedure,
			connect.WithSchema(federationServiceMethods.ByName("CreateFederation")),
			connect.WithClientOptions(opts...),
		),
		destroyFederation: connect.NewClient[v1alpha1.DestroyFederationRequest, v1alpha1.DestroyFederationResponse](
			httpClient,
			baseURL+FederationServiceDestroyFederationProcedure,
			connect.WithSchema(federationServiceMethods.ByName("DestroyFederation")),
			connect.WithClientOptions(opts...),
		),
		listFederations: connect.NewClient[v1alpha1.ListFederationsRequest, v1alpha1.ListFederationsResponse](
			httpClient,
			baseURL+FederationServiceListFederationsProcedure,
			connect.WithSchema(federationServiceMethods.ByName("ListFederations")),
			connect.WithClientOptions(opts...),
		),
		getFederation: connect.NewClient[v1alpha1.GetFederationRequest, v1alpha1.GetFederationResponse](
			httpClient,
			baseURL+FederationServiceGetFederationProcedure,
			connect.WithSchema(federationServiceMethods.ByName("GetFederation")),
			connect.WithClientOptions(opts...),
		),
	}
}

// federationServiceClient implements FederationServiceClient.
type federationServiceClient struct {
	createFederation  *connect.Client[v1alpha1.CreateFederationRequest, v1alpha1.CreateFederationResponse]
	destroyFederation *connect.Client[v1alpha1.DestroyFederationRequest, v1alpha1.DestroyFederationResponse]
	listFederations   *connect.Client[v1alpha1.ListFederationsRequest, v1alpha1.ListFederationsResponse]
	getFederation     *connect.Client[v1alpha1.GetFederationRequest, v1alpha1.GetFederationResponse]
}

// CreateFederation calls
// proto.connect.federation_service.v1alpha1.FederationService.CreateFederation.
func (c *federationServiceClient) CreateFederation(ctx context.Context, req *connect.Request[v1alpha1.CreateFederationRequest]) (*connect.Response[v1alpha1.CreateFederationResponse], error) {
	return c.createFederation.CallUnary(ctx, req)
}

// DestroyFederation calls
// proto.connect.federation_service.v1alpha1.FederationService.DestroyFederation.
func (c *federationServiceClient) DestroyFederation(ctx context.Context, req *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error) {
	return c.destroyFederation.CallUnary(ctx, req)
}

// ListFederations calls
// proto.connect.federation_service.v1alpha1.FederationService.ListFederations.
func (c *federationServiceClient) ListFederations(ctx context.Context, req *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error) {
	return c.listFederations.CallUnary(ctx, req)
}

// GetFederation calls proto.connect.federation_service.v1alpha1.FederationService.GetFederation.
func (c *federationServiceClient) GetFederation(ctx context.Context, req *connect.Request[v1alpha1.GetFederationRequest]) (*connect.Response[v1alpha1.GetFederationResponse], error) {
	return c.getFederation.CallUnary(ctx, req)
}

// FederationServiceHandler is an implementation of the
// proto.connect.federation_service.v1alpha1.FederationService service.
type FederationServiceHandler interface {
	CreateFederation(context.Context, *connect.Request[v1alpha1.CreateFederationRequest]) (*connect.Response[v1alpha1.CreateFederationResponse], error)
	DestroyFederation(context.Context, *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error)
	ListFederations(context.Context, *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error)
	GetFederation(context.Context, *connect.Request[v1alpha1.GetFederationRequest]) (*connect.Response[v1alpha1.GetFederationResponse], error)
}

// NewFederationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFederationServiceHandler(svc FederationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	federationServiceMethods := v1alpha1.File_proto_connect_federation_service_v1alpha1_federation_service_proto.Services().ByName("FederationService").Methods()
	federationServiceCreateFederationHandler := connect.NewUnaryHandler(
		FederationServiceCreateFederationProcedure,
		svc.CreateFederation,
		connect.WithSchema(federationServiceMethods.ByName("CreateFederation")),
		connect.WithHandlerOptions(opts...),
	)
	federationServiceDestroyFederationHandler := connect.NewUnaryHandler(
		FederationServiceDestroyFederationProcedure,
		svc.DestroyFederation,
		connect.WithSchema(federationServiceMethods.ByName("DestroyFederation")),
		connect.WithHandlerOptions(opts...),
	)
	federationServiceListFederationsHandler := connect.NewUnaryHandler(
		FederationServiceListFederationsProcedure,
		svc.ListFederations,
		connect.WithSchema(federationServiceMethods.ByName("ListFederations")),
		connect.WithHandlerOptions(opts...),
	)
	federationServiceGetFederationHandler := connect.NewUnaryHandler(
		FederationServiceGetFederationProcedure,
		svc.GetFederation,
		connect.WithSchema(federationServiceMethods.ByName("GetFederation")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.federation_service.v1alpha1.FederationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FederationServiceCreateFederationProcedure:
			federationServiceCreateFederationHandler.ServeHTTP(w, r)
		case FederationServiceDestroyFederationProcedure:
			federationServiceDestroyFederationHandler.ServeHTTP(w, r)
		case FederationServiceListFederationsProcedure:
			federationServiceListFederationsHandler.ServeHTTP(w, r)
		case FederationServiceGetFederationProcedure:
			federationServiceGetFederationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFederationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFederationServiceHandler struct{}

func (UnimplementedFederationServiceHandler) CreateFederation(context.Context, *connect.Request[v1alpha1.CreateFederationRequest]) (*connect.Response[v1alpha1.CreateFederationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.federation_service.v1alpha1.FederationService.CreateFederation is not implemented"))
}

func (UnimplementedFederationServiceHandler) DestroyFederation(context.Context, *connect.Request[v1alpha1.DestroyFederationRequest]) (*connect.Response[v1alpha1.DestroyFederationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.federation_service.v1alpha1.FederationService.DestroyFederation is not implemented"))
}

func (UnimplementedFederationServiceHandler) ListFederations(context.Context, *connect.Request[v1alpha1.ListFederationsRequest]) (*connect.Response[v1alpha1.ListFederationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.federation_service.v1alpha1.FederationService.ListFederations is not implemented"))
}

func (UnimplementedFederationServiceHandler) GetFederation(context.Context, *connect.Request[v1alpha1.GetFederationRequest]) (*connect.Response[v1alpha1.GetFederationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.federation_service.v1alpha1.FederationService.GetFederation is not implemented"))
}
