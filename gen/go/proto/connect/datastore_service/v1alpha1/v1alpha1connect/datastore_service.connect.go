// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/datastore_service/v1alpha1/datastore_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/datastore_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataStoreServiceName is the fully-qualified name of the DataStoreService service.
	DataStoreServiceName = "proto.connect.datastore_service.v1alpha1.DataStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataStoreServiceCountAttestedNodesProcedure is the fully-qualified name of the DataStoreService's
	// CountAttestedNodes RPC.
	DataStoreServiceCountAttestedNodesProcedure = "/proto.connect.datastore_service.v1alpha1.DataStoreService/CountAttestedNodes"
	// DataStoreServiceCreateAttestedNodeProcedure is the fully-qualified name of the DataStoreService's
	// CreateAttestedNode RPC.
	DataStoreServiceCreateAttestedNodeProcedure = "/proto.connect.datastore_service.v1alpha1.DataStoreService/CreateAttestedNode"
	// DataStoreServiceDeleteAttestedNodeProcedure is the fully-qualified name of the DataStoreService's
	// DeleteAttestedNode RPC.
	DataStoreServiceDeleteAttestedNodeProcedure = "/proto.connect.datastore_service.v1alpha1.DataStoreService/DeleteAttestedNode"
	// DataStoreServiceFetchAttestedNodeProcedure is the fully-qualified name of the DataStoreService's
	// FetchAttestedNode RPC.
	DataStoreServiceFetchAttestedNodeProcedure = "/proto.connect.datastore_service.v1alpha1.DataStoreService/FetchAttestedNode"
	// DataStoreServiceUpdateAttestedNodeProcedure is the fully-qualified name of the DataStoreService's
	// UpdateAttestedNode RPC.
	DataStoreServiceUpdateAttestedNodeProcedure = "/proto.connect.datastore_service.v1alpha1.DataStoreService/UpdateAttestedNode"
	// DataStoreServiceGetNodeSelectorsProcedure is the fully-qualified name of the DataStoreService's
	// GetNodeSelectors RPC.
	DataStoreServiceGetNodeSelectorsProcedure = "/proto.connect.datastore_service.v1alpha1.DataStoreService/GetNodeSelectors"
	// DataStoreServiceSetNodeSelectorsProcedure is the fully-qualified name of the DataStoreService's
	// SetNodeSelectors RPC.
	DataStoreServiceSetNodeSelectorsProcedure = "/proto.connect.datastore_service.v1alpha1.DataStoreService/SetNodeSelectors"
)

// DataStoreServiceClient is a client for the
// proto.connect.datastore_service.v1alpha1.DataStoreService service.
type DataStoreServiceClient interface {
	// Node operations
	CountAttestedNodes(context.Context, *connect.Request[v1alpha1.CountAttestedNodesRequest]) (*connect.Response[v1alpha1.CountAttestedNodesResponse], error)
	CreateAttestedNode(context.Context, *connect.Request[v1alpha1.CreateAttestedNodeRequest]) (*connect.Response[v1alpha1.CreateAttestedNodeResponse], error)
	DeleteAttestedNode(context.Context, *connect.Request[v1alpha1.DeleteAttestedNodeRequest]) (*connect.Response[v1alpha1.DeleteAttestedNodeResponse], error)
	FetchAttestedNode(context.Context, *connect.Request[v1alpha1.FetchAttestedNodeRequest]) (*connect.Response[v1alpha1.FetchAttestedNodeResponse], error)
	UpdateAttestedNode(context.Context, *connect.Request[v1alpha1.UpdateAttestedNodeRequest]) (*connect.Response[v1alpha1.UpdateAttestedNodeResponse], error)
	// Node Selector operations
	GetNodeSelectors(context.Context, *connect.Request[v1alpha1.GetNodeSelectorsRequest]) (*connect.Response[v1alpha1.GetNodeSelectorsResponse], error)
	SetNodeSelectors(context.Context, *connect.Request[v1alpha1.SetNodeSelectorsRequest]) (*connect.Response[v1alpha1.SetNodeSelectorsResponse], error)
}

// NewDataStoreServiceClient constructs a client for the
// proto.connect.datastore_service.v1alpha1.DataStoreService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dataStoreServiceMethods := v1alpha1.File_proto_connect_datastore_service_v1alpha1_datastore_service_proto.Services().ByName("DataStoreService").Methods()
	return &dataStoreServiceClient{
		countAttestedNodes: connect.NewClient[v1alpha1.CountAttestedNodesRequest, v1alpha1.CountAttestedNodesResponse](
			httpClient,
			baseURL+DataStoreServiceCountAttestedNodesProcedure,
			connect.WithSchema(dataStoreServiceMethods.ByName("CountAttestedNodes")),
			connect.WithClientOptions(opts...),
		),
		createAttestedNode: connect.NewClient[v1alpha1.CreateAttestedNodeRequest, v1alpha1.CreateAttestedNodeResponse](
			httpClient,
			baseURL+DataStoreServiceCreateAttestedNodeProcedure,
			connect.WithSchema(dataStoreServiceMethods.ByName("CreateAttestedNode")),
			connect.WithClientOptions(opts...),
		),
		deleteAttestedNode: connect.NewClient[v1alpha1.DeleteAttestedNodeRequest, v1alpha1.DeleteAttestedNodeResponse](
			httpClient,
			baseURL+DataStoreServiceDeleteAttestedNodeProcedure,
			connect.WithSchema(dataStoreServiceMethods.ByName("DeleteAttestedNode")),
			connect.WithClientOptions(opts...),
		),
		fetchAttestedNode: connect.NewClient[v1alpha1.FetchAttestedNodeRequest, v1alpha1.FetchAttestedNodeResponse](
			httpClient,
			baseURL+DataStoreServiceFetchAttestedNodeProcedure,
			connect.WithSchema(dataStoreServiceMethods.ByName("FetchAttestedNode")),
			connect.WithClientOptions(opts...),
		),
		updateAttestedNode: connect.NewClient[v1alpha1.UpdateAttestedNodeRequest, v1alpha1.UpdateAttestedNodeResponse](
			httpClient,
			baseURL+DataStoreServiceUpdateAttestedNodeProcedure,
			connect.WithSchema(dataStoreServiceMethods.ByName("UpdateAttestedNode")),
			connect.WithClientOptions(opts...),
		),
		getNodeSelectors: connect.NewClient[v1alpha1.GetNodeSelectorsRequest, v1alpha1.GetNodeSelectorsResponse](
			httpClient,
			baseURL+DataStoreServiceGetNodeSelectorsProcedure,
			connect.WithSchema(dataStoreServiceMethods.ByName("GetNodeSelectors")),
			connect.WithClientOptions(opts...),
		),
		setNodeSelectors: connect.NewClient[v1alpha1.SetNodeSelectorsRequest, v1alpha1.SetNodeSelectorsResponse](
			httpClient,
			baseURL+DataStoreServiceSetNodeSelectorsProcedure,
			connect.WithSchema(dataStoreServiceMethods.ByName("SetNodeSelectors")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataStoreServiceClient implements DataStoreServiceClient.
type dataStoreServiceClient struct {
	countAttestedNodes *connect.Client[v1alpha1.CountAttestedNodesRequest, v1alpha1.CountAttestedNodesResponse]
	createAttestedNode *connect.Client[v1alpha1.CreateAttestedNodeRequest, v1alpha1.CreateAttestedNodeResponse]
	deleteAttestedNode *connect.Client[v1alpha1.DeleteAttestedNodeRequest, v1alpha1.DeleteAttestedNodeResponse]
	fetchAttestedNode  *connect.Client[v1alpha1.FetchAttestedNodeRequest, v1alpha1.FetchAttestedNodeResponse]
	updateAttestedNode *connect.Client[v1alpha1.UpdateAttestedNodeRequest, v1alpha1.UpdateAttestedNodeResponse]
	getNodeSelectors   *connect.Client[v1alpha1.GetNodeSelectorsRequest, v1alpha1.GetNodeSelectorsResponse]
	setNodeSelectors   *connect.Client[v1alpha1.SetNodeSelectorsRequest, v1alpha1.SetNodeSelectorsResponse]
}

// CountAttestedNodes calls
// proto.connect.datastore_service.v1alpha1.DataStoreService.CountAttestedNodes.
func (c *dataStoreServiceClient) CountAttestedNodes(ctx context.Context, req *connect.Request[v1alpha1.CountAttestedNodesRequest]) (*connect.Response[v1alpha1.CountAttestedNodesResponse], error) {
	return c.countAttestedNodes.CallUnary(ctx, req)
}

// CreateAttestedNode calls
// proto.connect.datastore_service.v1alpha1.DataStoreService.CreateAttestedNode.
func (c *dataStoreServiceClient) CreateAttestedNode(ctx context.Context, req *connect.Request[v1alpha1.CreateAttestedNodeRequest]) (*connect.Response[v1alpha1.CreateAttestedNodeResponse], error) {
	return c.createAttestedNode.CallUnary(ctx, req)
}

// DeleteAttestedNode calls
// proto.connect.datastore_service.v1alpha1.DataStoreService.DeleteAttestedNode.
func (c *dataStoreServiceClient) DeleteAttestedNode(ctx context.Context, req *connect.Request[v1alpha1.DeleteAttestedNodeRequest]) (*connect.Response[v1alpha1.DeleteAttestedNodeResponse], error) {
	return c.deleteAttestedNode.CallUnary(ctx, req)
}

// FetchAttestedNode calls
// proto.connect.datastore_service.v1alpha1.DataStoreService.FetchAttestedNode.
func (c *dataStoreServiceClient) FetchAttestedNode(ctx context.Context, req *connect.Request[v1alpha1.FetchAttestedNodeRequest]) (*connect.Response[v1alpha1.FetchAttestedNodeResponse], error) {
	return c.fetchAttestedNode.CallUnary(ctx, req)
}

// UpdateAttestedNode calls
// proto.connect.datastore_service.v1alpha1.DataStoreService.UpdateAttestedNode.
func (c *dataStoreServiceClient) UpdateAttestedNode(ctx context.Context, req *connect.Request[v1alpha1.UpdateAttestedNodeRequest]) (*connect.Response[v1alpha1.UpdateAttestedNodeResponse], error) {
	return c.updateAttestedNode.CallUnary(ctx, req)
}

// GetNodeSelectors calls
// proto.connect.datastore_service.v1alpha1.DataStoreService.GetNodeSelectors.
func (c *dataStoreServiceClient) GetNodeSelectors(ctx context.Context, req *connect.Request[v1alpha1.GetNodeSelectorsRequest]) (*connect.Response[v1alpha1.GetNodeSelectorsResponse], error) {
	return c.getNodeSelectors.CallUnary(ctx, req)
}

// SetNodeSelectors calls
// proto.connect.datastore_service.v1alpha1.DataStoreService.SetNodeSelectors.
func (c *dataStoreServiceClient) SetNodeSelectors(ctx context.Context, req *connect.Request[v1alpha1.SetNodeSelectorsRequest]) (*connect.Response[v1alpha1.SetNodeSelectorsResponse], error) {
	return c.setNodeSelectors.CallUnary(ctx, req)
}

// DataStoreServiceHandler is an implementation of the
// proto.connect.datastore_service.v1alpha1.DataStoreService service.
type DataStoreServiceHandler interface {
	// Node operations
	CountAttestedNodes(context.Context, *connect.Request[v1alpha1.CountAttestedNodesRequest]) (*connect.Response[v1alpha1.CountAttestedNodesResponse], error)
	CreateAttestedNode(context.Context, *connect.Request[v1alpha1.CreateAttestedNodeRequest]) (*connect.Response[v1alpha1.CreateAttestedNodeResponse], error)
	DeleteAttestedNode(context.Context, *connect.Request[v1alpha1.DeleteAttestedNodeRequest]) (*connect.Response[v1alpha1.DeleteAttestedNodeResponse], error)
	FetchAttestedNode(context.Context, *connect.Request[v1alpha1.FetchAttestedNodeRequest]) (*connect.Response[v1alpha1.FetchAttestedNodeResponse], error)
	UpdateAttestedNode(context.Context, *connect.Request[v1alpha1.UpdateAttestedNodeRequest]) (*connect.Response[v1alpha1.UpdateAttestedNodeResponse], error)
	// Node Selector operations
	GetNodeSelectors(context.Context, *connect.Request[v1alpha1.GetNodeSelectorsRequest]) (*connect.Response[v1alpha1.GetNodeSelectorsResponse], error)
	SetNodeSelectors(context.Context, *connect.Request[v1alpha1.SetNodeSelectorsRequest]) (*connect.Response[v1alpha1.SetNodeSelectorsResponse], error)
}

// NewDataStoreServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataStoreServiceHandler(svc DataStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataStoreServiceMethods := v1alpha1.File_proto_connect_datastore_service_v1alpha1_datastore_service_proto.Services().ByName("DataStoreService").Methods()
	dataStoreServiceCountAttestedNodesHandler := connect.NewUnaryHandler(
		DataStoreServiceCountAttestedNodesProcedure,
		svc.CountAttestedNodes,
		connect.WithSchema(dataStoreServiceMethods.ByName("CountAttestedNodes")),
		connect.WithHandlerOptions(opts...),
	)
	dataStoreServiceCreateAttestedNodeHandler := connect.NewUnaryHandler(
		DataStoreServiceCreateAttestedNodeProcedure,
		svc.CreateAttestedNode,
		connect.WithSchema(dataStoreServiceMethods.ByName("CreateAttestedNode")),
		connect.WithHandlerOptions(opts...),
	)
	dataStoreServiceDeleteAttestedNodeHandler := connect.NewUnaryHandler(
		DataStoreServiceDeleteAttestedNodeProcedure,
		svc.DeleteAttestedNode,
		connect.WithSchema(dataStoreServiceMethods.ByName("DeleteAttestedNode")),
		connect.WithHandlerOptions(opts...),
	)
	dataStoreServiceFetchAttestedNodeHandler := connect.NewUnaryHandler(
		DataStoreServiceFetchAttestedNodeProcedure,
		svc.FetchAttestedNode,
		connect.WithSchema(dataStoreServiceMethods.ByName("FetchAttestedNode")),
		connect.WithHandlerOptions(opts...),
	)
	dataStoreServiceUpdateAttestedNodeHandler := connect.NewUnaryHandler(
		DataStoreServiceUpdateAttestedNodeProcedure,
		svc.UpdateAttestedNode,
		connect.WithSchema(dataStoreServiceMethods.ByName("UpdateAttestedNode")),
		connect.WithHandlerOptions(opts...),
	)
	dataStoreServiceGetNodeSelectorsHandler := connect.NewUnaryHandler(
		DataStoreServiceGetNodeSelectorsProcedure,
		svc.GetNodeSelectors,
		connect.WithSchema(dataStoreServiceMethods.ByName("GetNodeSelectors")),
		connect.WithHandlerOptions(opts...),
	)
	dataStoreServiceSetNodeSelectorsHandler := connect.NewUnaryHandler(
		DataStoreServiceSetNodeSelectorsProcedure,
		svc.SetNodeSelectors,
		connect.WithSchema(dataStoreServiceMethods.ByName("SetNodeSelectors")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.datastore_service.v1alpha1.DataStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataStoreServiceCountAttestedNodesProcedure:
			dataStoreServiceCountAttestedNodesHandler.ServeHTTP(w, r)
		case DataStoreServiceCreateAttestedNodeProcedure:
			dataStoreServiceCreateAttestedNodeHandler.ServeHTTP(w, r)
		case DataStoreServiceDeleteAttestedNodeProcedure:
			dataStoreServiceDeleteAttestedNodeHandler.ServeHTTP(w, r)
		case DataStoreServiceFetchAttestedNodeProcedure:
			dataStoreServiceFetchAttestedNodeHandler.ServeHTTP(w, r)
		case DataStoreServiceUpdateAttestedNodeProcedure:
			dataStoreServiceUpdateAttestedNodeHandler.ServeHTTP(w, r)
		case DataStoreServiceGetNodeSelectorsProcedure:
			dataStoreServiceGetNodeSelectorsHandler.ServeHTTP(w, r)
		case DataStoreServiceSetNodeSelectorsProcedure:
			dataStoreServiceSetNodeSelectorsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataStoreServiceHandler struct{}

func (UnimplementedDataStoreServiceHandler) CountAttestedNodes(context.Context, *connect.Request[v1alpha1.CountAttestedNodesRequest]) (*connect.Response[v1alpha1.CountAttestedNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.datastore_service.v1alpha1.DataStoreService.CountAttestedNodes is not implemented"))
}

func (UnimplementedDataStoreServiceHandler) CreateAttestedNode(context.Context, *connect.Request[v1alpha1.CreateAttestedNodeRequest]) (*connect.Response[v1alpha1.CreateAttestedNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.datastore_service.v1alpha1.DataStoreService.CreateAttestedNode is not implemented"))
}

func (UnimplementedDataStoreServiceHandler) DeleteAttestedNode(context.Context, *connect.Request[v1alpha1.DeleteAttestedNodeRequest]) (*connect.Response[v1alpha1.DeleteAttestedNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.datastore_service.v1alpha1.DataStoreService.DeleteAttestedNode is not implemented"))
}

func (UnimplementedDataStoreServiceHandler) FetchAttestedNode(context.Context, *connect.Request[v1alpha1.FetchAttestedNodeRequest]) (*connect.Response[v1alpha1.FetchAttestedNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.datastore_service.v1alpha1.DataStoreService.FetchAttestedNode is not implemented"))
}

func (UnimplementedDataStoreServiceHandler) UpdateAttestedNode(context.Context, *connect.Request[v1alpha1.UpdateAttestedNodeRequest]) (*connect.Response[v1alpha1.UpdateAttestedNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.datastore_service.v1alpha1.DataStoreService.UpdateAttestedNode is not implemented"))
}

func (UnimplementedDataStoreServiceHandler) GetNodeSelectors(context.Context, *connect.Request[v1alpha1.GetNodeSelectorsRequest]) (*connect.Response[v1alpha1.GetNodeSelectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.datastore_service.v1alpha1.DataStoreService.GetNodeSelectors is not implemented"))
}

func (UnimplementedDataStoreServiceHandler) SetNodeSelectors(context.Context, *connect.Request[v1alpha1.SetNodeSelectorsRequest]) (*connect.Response[v1alpha1.SetNodeSelectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.datastore_service.v1alpha1.DataStoreService.SetNodeSelectors is not implemented"))
}
