// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/connect/datastore_service/v1alpha1/datastore_service.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Node operations request/response messages
type CountAttestedNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountAttestedNodesRequest) Reset() {
	*x = CountAttestedNodesRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountAttestedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAttestedNodesRequest) ProtoMessage() {}

func (x *CountAttestedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAttestedNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAttestedNodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{0}
}

type CountAttestedNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountAttestedNodesResponse) Reset() {
	*x = CountAttestedNodesResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountAttestedNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAttestedNodesResponse) ProtoMessage() {}

func (x *CountAttestedNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAttestedNodesResponse.ProtoReflect.Descriptor instead.
func (*CountAttestedNodesResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{1}
}

func (x *CountAttestedNodesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CreateAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAttestedNodeRequest) Reset() {
	*x = CreateAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestedNodeRequest) ProtoMessage() {}

func (x *CreateAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAttestedNodeRequest) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type CreateAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAttestedNodeResponse) Reset() {
	*x = CreateAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestedNodeResponse) ProtoMessage() {}

func (x *CreateAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAttestedNodeResponse) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type DeleteAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAttestedNodeRequest) Reset() {
	*x = DeleteAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttestedNodeRequest) ProtoMessage() {}

func (x *DeleteAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAttestedNodeRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

type DeleteAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAttestedNodeResponse) Reset() {
	*x = DeleteAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttestedNodeResponse) ProtoMessage() {}

func (x *DeleteAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{5}
}

type FetchAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAttestedNodeRequest) Reset() {
	*x = FetchAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAttestedNodeRequest) ProtoMessage() {}

func (x *FetchAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*FetchAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{6}
}

func (x *FetchAttestedNodeRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

type FetchAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAttestedNodeResponse) Reset() {
	*x = FetchAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAttestedNodeResponse) ProtoMessage() {}

func (x *FetchAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*FetchAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{7}
}

func (x *FetchAttestedNodeResponse) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type UpdateAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAttestedNodeRequest) Reset() {
	*x = UpdateAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestedNodeRequest) ProtoMessage() {}

func (x *UpdateAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAttestedNodeRequest) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type UpdateAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAttestedNodeResponse) Reset() {
	*x = UpdateAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestedNodeResponse) ProtoMessage() {}

func (x *UpdateAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAttestedNodeResponse) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

// Node Selector operations request/response messages
type GetNodeSelectorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeSelectorsRequest) Reset() {
	*x = GetNodeSelectorsRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsRequest) ProtoMessage() {}

func (x *GetNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetNodeSelectorsRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

type GetNodeSelectorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Selectors     []*Selector            `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeSelectorsResponse) Reset() {
	*x = GetNodeSelectorsResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsResponse) ProtoMessage() {}

func (x *GetNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetNodeSelectorsResponse) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *GetNodeSelectorsResponse) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type SetNodeSelectorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Selectors     []*Selector            `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetNodeSelectorsRequest) Reset() {
	*x = SetNodeSelectorsRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeSelectorsRequest) ProtoMessage() {}

func (x *SetNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*SetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{12}
}

func (x *SetNodeSelectorsRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *SetNodeSelectorsRequest) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type SetNodeSelectorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetNodeSelectorsResponse) Reset() {
	*x = SetNodeSelectorsResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeSelectorsResponse) ProtoMessage() {}

func (x *SetNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*SetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{13}
}

var File_proto_connect_datastore_service_v1alpha1_datastore_service_proto protoreflect.FileDescriptor

var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc = string([]byte{
	0x0a, 0x40, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x38, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0x68, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66,
	0x66, 0x65, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x37, 0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x19, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x22,
	0x89, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x17,
	0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66,
	0x66, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xf1, 0x08, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x43,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01,
	0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x66, 0x69,
	0x64, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescOnce sync.Once
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescData []byte
)

func file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP() []byte {
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescOnce.Do(func() {
		file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc), len(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc)))
	})
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescData
}

var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_goTypes = []any{
	(*CountAttestedNodesRequest)(nil),  // 0: proto.connect.datastore_service.v1alpha1.CountAttestedNodesRequest
	(*CountAttestedNodesResponse)(nil), // 1: proto.connect.datastore_service.v1alpha1.CountAttestedNodesResponse
	(*CreateAttestedNodeRequest)(nil),  // 2: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeRequest
	(*CreateAttestedNodeResponse)(nil), // 3: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeResponse
	(*DeleteAttestedNodeRequest)(nil),  // 4: proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeRequest
	(*DeleteAttestedNodeResponse)(nil), // 5: proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeResponse
	(*FetchAttestedNodeRequest)(nil),   // 6: proto.connect.datastore_service.v1alpha1.FetchAttestedNodeRequest
	(*FetchAttestedNodeResponse)(nil),  // 7: proto.connect.datastore_service.v1alpha1.FetchAttestedNodeResponse
	(*UpdateAttestedNodeRequest)(nil),  // 8: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeRequest
	(*UpdateAttestedNodeResponse)(nil), // 9: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeResponse
	(*GetNodeSelectorsRequest)(nil),    // 10: proto.connect.datastore_service.v1alpha1.GetNodeSelectorsRequest
	(*GetNodeSelectorsResponse)(nil),   // 11: proto.connect.datastore_service.v1alpha1.GetNodeSelectorsResponse
	(*SetNodeSelectorsRequest)(nil),    // 12: proto.connect.datastore_service.v1alpha1.SetNodeSelectorsRequest
	(*SetNodeSelectorsResponse)(nil),   // 13: proto.connect.datastore_service.v1alpha1.SetNodeSelectorsResponse
	(*AttestedNode)(nil),               // 14: proto.connect.datastore_service.v1alpha1.AttestedNode
	(*Selector)(nil),                   // 15: proto.connect.datastore_service.v1alpha1.Selector
}
var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_depIdxs = []int32{
	14, // 0: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeRequest.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	14, // 1: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeResponse.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	14, // 2: proto.connect.datastore_service.v1alpha1.FetchAttestedNodeResponse.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	14, // 3: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeRequest.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	14, // 4: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeResponse.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	15, // 5: proto.connect.datastore_service.v1alpha1.GetNodeSelectorsResponse.selectors:type_name -> proto.connect.datastore_service.v1alpha1.Selector
	15, // 6: proto.connect.datastore_service.v1alpha1.SetNodeSelectorsRequest.selectors:type_name -> proto.connect.datastore_service.v1alpha1.Selector
	0,  // 7: proto.connect.datastore_service.v1alpha1.DataStoreService.CountAttestedNodes:input_type -> proto.connect.datastore_service.v1alpha1.CountAttestedNodesRequest
	2,  // 8: proto.connect.datastore_service.v1alpha1.DataStoreService.CreateAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.CreateAttestedNodeRequest
	4,  // 9: proto.connect.datastore_service.v1alpha1.DataStoreService.DeleteAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeRequest
	6,  // 10: proto.connect.datastore_service.v1alpha1.DataStoreService.FetchAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.FetchAttestedNodeRequest
	8,  // 11: proto.connect.datastore_service.v1alpha1.DataStoreService.UpdateAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeRequest
	10, // 12: proto.connect.datastore_service.v1alpha1.DataStoreService.GetNodeSelectors:input_type -> proto.connect.datastore_service.v1alpha1.GetNodeSelectorsRequest
	12, // 13: proto.connect.datastore_service.v1alpha1.DataStoreService.SetNodeSelectors:input_type -> proto.connect.datastore_service.v1alpha1.SetNodeSelectorsRequest
	1,  // 14: proto.connect.datastore_service.v1alpha1.DataStoreService.CountAttestedNodes:output_type -> proto.connect.datastore_service.v1alpha1.CountAttestedNodesResponse
	3,  // 15: proto.connect.datastore_service.v1alpha1.DataStoreService.CreateAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.CreateAttestedNodeResponse
	5,  // 16: proto.connect.datastore_service.v1alpha1.DataStoreService.DeleteAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeResponse
	7,  // 17: proto.connect.datastore_service.v1alpha1.DataStoreService.FetchAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.FetchAttestedNodeResponse
	9,  // 18: proto.connect.datastore_service.v1alpha1.DataStoreService.UpdateAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeResponse
	11, // 19: proto.connect.datastore_service.v1alpha1.DataStoreService.GetNodeSelectors:output_type -> proto.connect.datastore_service.v1alpha1.GetNodeSelectorsResponse
	13, // 20: proto.connect.datastore_service.v1alpha1.DataStoreService.SetNodeSelectors:output_type -> proto.connect.datastore_service.v1alpha1.SetNodeSelectorsResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_init() }
func file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_init() {
	if File_proto_connect_datastore_service_v1alpha1_datastore_service_proto != nil {
		return
	}
	file_proto_connect_datastore_service_v1alpha1_datastore_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc), len(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_goTypes,
		DependencyIndexes: file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_depIdxs,
		MessageInfos:      file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes,
	}.Build()
	File_proto_connect_datastore_service_v1alpha1_datastore_service_proto = out.File
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_goTypes = nil
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_depIdxs = nil
}
