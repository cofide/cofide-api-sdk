// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/connect/datastore_service/v1alpha1/datastore_service.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAttestedNodesRequest_MatchBehavior int32

const (
	ListAttestedNodesRequest_MATCH_BEHAVIOR_EXACT_UNSPECIFIED ListAttestedNodesRequest_MatchBehavior = 0
	ListAttestedNodesRequest_MATCH_BEHAVIOR_SUBSET            ListAttestedNodesRequest_MatchBehavior = 1
	ListAttestedNodesRequest_MATCH_BEHAVIOR_SUPERSET          ListAttestedNodesRequest_MatchBehavior = 2
	ListAttestedNodesRequest_MATCH_BEHAVIOR_MATCH_ANY         ListAttestedNodesRequest_MatchBehavior = 3
)

// Enum value maps for ListAttestedNodesRequest_MatchBehavior.
var (
	ListAttestedNodesRequest_MatchBehavior_name = map[int32]string{
		0: "MATCH_BEHAVIOR_EXACT_UNSPECIFIED",
		1: "MATCH_BEHAVIOR_SUBSET",
		2: "MATCH_BEHAVIOR_SUPERSET",
		3: "MATCH_BEHAVIOR_MATCH_ANY",
	}
	ListAttestedNodesRequest_MatchBehavior_value = map[string]int32{
		"MATCH_BEHAVIOR_EXACT_UNSPECIFIED": 0,
		"MATCH_BEHAVIOR_SUBSET":            1,
		"MATCH_BEHAVIOR_SUPERSET":          2,
		"MATCH_BEHAVIOR_MATCH_ANY":         3,
	}
)

func (x ListAttestedNodesRequest_MatchBehavior) Enum() *ListAttestedNodesRequest_MatchBehavior {
	p := new(ListAttestedNodesRequest_MatchBehavior)
	*p = x
	return p
}

func (x ListAttestedNodesRequest_MatchBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAttestedNodesRequest_MatchBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_enumTypes[0].Descriptor()
}

func (ListAttestedNodesRequest_MatchBehavior) Type() protoreflect.EnumType {
	return &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_enumTypes[0]
}

func (x ListAttestedNodesRequest_MatchBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAttestedNodesRequest_MatchBehavior.Descriptor instead.
func (ListAttestedNodesRequest_MatchBehavior) EnumDescriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{11, 0}
}

// Node operations request/response messages
type CountAttestedNodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrustZoneId   *string                `protobuf:"bytes,1,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountAttestedNodesRequest) Reset() {
	*x = CountAttestedNodesRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountAttestedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAttestedNodesRequest) ProtoMessage() {}

func (x *CountAttestedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAttestedNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAttestedNodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{0}
}

func (x *CountAttestedNodesRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type CountAttestedNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountAttestedNodesResponse) Reset() {
	*x = CountAttestedNodesResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountAttestedNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAttestedNodesResponse) ProtoMessage() {}

func (x *CountAttestedNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAttestedNodesResponse.ProtoReflect.Descriptor instead.
func (*CountAttestedNodesResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{1}
}

func (x *CountAttestedNodesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type CreateAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	TrustZoneId   *string                `protobuf:"bytes,2,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAttestedNodeRequest) Reset() {
	*x = CreateAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestedNodeRequest) ProtoMessage() {}

func (x *CreateAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAttestedNodeRequest) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateAttestedNodeRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type CreateAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAttestedNodeResponse) Reset() {
	*x = CreateAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestedNodeResponse) ProtoMessage() {}

func (x *CreateAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAttestedNodeResponse) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type DeleteAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	TrustZoneId   *string                `protobuf:"bytes,2,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAttestedNodeRequest) Reset() {
	*x = DeleteAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttestedNodeRequest) ProtoMessage() {}

func (x *DeleteAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAttestedNodeRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *DeleteAttestedNodeRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type DeleteAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAttestedNodeResponse) Reset() {
	*x = DeleteAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttestedNodeResponse) ProtoMessage() {}

func (x *DeleteAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteAttestedNodeResponse) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type FetchAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	TrustZoneId   *string                `protobuf:"bytes,2,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAttestedNodeRequest) Reset() {
	*x = FetchAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAttestedNodeRequest) ProtoMessage() {}

func (x *FetchAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*FetchAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{6}
}

func (x *FetchAttestedNodeRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *FetchAttestedNodeRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type FetchAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAttestedNodeResponse) Reset() {
	*x = FetchAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAttestedNodeResponse) ProtoMessage() {}

func (x *FetchAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*FetchAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{7}
}

func (x *FetchAttestedNodeResponse) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type UpdateAttestedNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Mask          *AttestedNodeMask      `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	TrustZoneId   *string                `protobuf:"bytes,3,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAttestedNodeRequest) Reset() {
	*x = UpdateAttestedNodeRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestedNodeRequest) ProtoMessage() {}

func (x *UpdateAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAttestedNodeRequest) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *UpdateAttestedNodeRequest) GetMask() *AttestedNodeMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *UpdateAttestedNodeRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type AttestedNodeMask struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AttestationDataType bool                   `protobuf:"varint,1,opt,name=attestation_data_type,json=attestationDataType,proto3" json:"attestation_data_type,omitempty"`
	CertSerialNumber    bool                   `protobuf:"varint,2,opt,name=cert_serial_number,json=certSerialNumber,proto3" json:"cert_serial_number,omitempty"`
	CertNotAfter        bool                   `protobuf:"varint,3,opt,name=cert_not_after,json=certNotAfter,proto3" json:"cert_not_after,omitempty"`
	NewCertSerialNumber bool                   `protobuf:"varint,4,opt,name=new_cert_serial_number,json=newCertSerialNumber,proto3" json:"new_cert_serial_number,omitempty"`
	NewCertNotAfter     bool                   `protobuf:"varint,5,opt,name=new_cert_not_after,json=newCertNotAfter,proto3" json:"new_cert_not_after,omitempty"`
	CanReattest         bool                   `protobuf:"varint,7,opt,name=can_reattest,json=canReattest,proto3" json:"can_reattest,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AttestedNodeMask) Reset() {
	*x = AttestedNodeMask{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttestedNodeMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestedNodeMask) ProtoMessage() {}

func (x *AttestedNodeMask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestedNodeMask.ProtoReflect.Descriptor instead.
func (*AttestedNodeMask) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{9}
}

func (x *AttestedNodeMask) GetAttestationDataType() bool {
	if x != nil {
		return x.AttestationDataType
	}
	return false
}

func (x *AttestedNodeMask) GetCertSerialNumber() bool {
	if x != nil {
		return x.CertSerialNumber
	}
	return false
}

func (x *AttestedNodeMask) GetCertNotAfter() bool {
	if x != nil {
		return x.CertNotAfter
	}
	return false
}

func (x *AttestedNodeMask) GetNewCertSerialNumber() bool {
	if x != nil {
		return x.NewCertSerialNumber
	}
	return false
}

func (x *AttestedNodeMask) GetNewCertNotAfter() bool {
	if x != nil {
		return x.NewCertNotAfter
	}
	return false
}

func (x *AttestedNodeMask) GetCanReattest() bool {
	if x != nil {
		return x.CanReattest
	}
	return false
}

type UpdateAttestedNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Node          *AttestedNode          `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAttestedNodeResponse) Reset() {
	*x = UpdateAttestedNodeResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestedNodeResponse) ProtoMessage() {}

func (x *UpdateAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAttestedNodeResponse) GetNode() *AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type ListAttestedNodesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filters nodes by attestation type
	ByAttestationType *string `protobuf:"bytes,1,opt,name=by_attestation_type,json=byAttestationType,proto3,oneof" json:"by_attestation_type,omitempty"`
	// Filters nodes by banned status
	ByBanned *bool `protobuf:"varint,2,opt,name=by_banned,json=byBanned,proto3,oneof" json:"by_banned,omitempty"`
	// Filters nodes that expire before the specified timestamp
	ByExpiresBefore *int64                                `protobuf:"varint,3,opt,name=by_expires_before,json=byExpiresBefore,proto3,oneof" json:"by_expires_before,omitempty"`
	BySelectorMatch *ListAttestedNodesRequest_BySelectors `protobuf:"bytes,4,opt,name=by_selector_match,json=bySelectorMatch,proto3,oneof" json:"by_selector_match,omitempty"`
	// Whether to fetch selectors with nodes
	FetchSelectors *bool `protobuf:"varint,5,opt,name=fetch_selectors,json=fetchSelectors,proto3,oneof" json:"fetch_selectors,omitempty"`
	// Filters nodes by ability to re-attest
	ByCanReattest *bool   `protobuf:"varint,6,opt,name=by_can_reattest,json=byCanReattest,proto3,oneof" json:"by_can_reattest,omitempty"`
	TrustZoneId   *string `protobuf:"bytes,7,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttestedNodesRequest) Reset() {
	*x = ListAttestedNodesRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttestedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestedNodesRequest) ProtoMessage() {}

func (x *ListAttestedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestedNodesRequest.ProtoReflect.Descriptor instead.
func (*ListAttestedNodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListAttestedNodesRequest) GetByAttestationType() string {
	if x != nil && x.ByAttestationType != nil {
		return *x.ByAttestationType
	}
	return ""
}

func (x *ListAttestedNodesRequest) GetByBanned() bool {
	if x != nil && x.ByBanned != nil {
		return *x.ByBanned
	}
	return false
}

func (x *ListAttestedNodesRequest) GetByExpiresBefore() int64 {
	if x != nil && x.ByExpiresBefore != nil {
		return *x.ByExpiresBefore
	}
	return 0
}

func (x *ListAttestedNodesRequest) GetBySelectorMatch() *ListAttestedNodesRequest_BySelectors {
	if x != nil {
		return x.BySelectorMatch
	}
	return nil
}

func (x *ListAttestedNodesRequest) GetFetchSelectors() bool {
	if x != nil && x.FetchSelectors != nil {
		return *x.FetchSelectors
	}
	return false
}

func (x *ListAttestedNodesRequest) GetByCanReattest() bool {
	if x != nil && x.ByCanReattest != nil {
		return *x.ByCanReattest
	}
	return false
}

func (x *ListAttestedNodesRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type ListAttestedNodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*AttestedNode        `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttestedNodesResponse) Reset() {
	*x = ListAttestedNodesResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttestedNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestedNodesResponse) ProtoMessage() {}

func (x *ListAttestedNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestedNodesResponse.ProtoReflect.Descriptor instead.
func (*ListAttestedNodesResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListAttestedNodesResponse) GetNodes() []*AttestedNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Node Selector operations request/response messages
type GetNodeSelectorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	TrustZoneId   *string                `protobuf:"bytes,2,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeSelectorsRequest) Reset() {
	*x = GetNodeSelectorsRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsRequest) ProtoMessage() {}

func (x *GetNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetNodeSelectorsRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *GetNodeSelectorsRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type GetNodeSelectorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Selectors     []*Selector            `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeSelectorsResponse) Reset() {
	*x = GetNodeSelectorsResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsResponse) ProtoMessage() {}

func (x *GetNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetNodeSelectorsResponse) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *GetNodeSelectorsResponse) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type SetNodeSelectorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpiffeId      string                 `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Selectors     []*Selector            `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	TrustZoneId   *string                `protobuf:"bytes,3,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetNodeSelectorsRequest) Reset() {
	*x = SetNodeSelectorsRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeSelectorsRequest) ProtoMessage() {}

func (x *SetNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*SetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{15}
}

func (x *SetNodeSelectorsRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *SetNodeSelectorsRequest) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *SetNodeSelectorsRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type SetNodeSelectorsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetNodeSelectorsResponse) Reset() {
	*x = SetNodeSelectorsResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeSelectorsResponse) ProtoMessage() {}

func (x *SetNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*SetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{16}
}

type ListNodeSelectorsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValidAt       *int64                 `protobuf:"varint,1,opt,name=valid_at,json=validAt,proto3,oneof" json:"valid_at,omitempty"`
	TrustZoneId   *string                `protobuf:"bytes,2,opt,name=trust_zone_id,json=trustZoneId,proto3,oneof" json:"trust_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeSelectorsRequest) Reset() {
	*x = ListNodeSelectorsRequest{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeSelectorsRequest) ProtoMessage() {}

func (x *ListNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*ListNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListNodeSelectorsRequest) GetValidAt() int64 {
	if x != nil && x.ValidAt != nil {
		return *x.ValidAt
	}
	return 0
}

func (x *ListNodeSelectorsRequest) GetTrustZoneId() string {
	if x != nil && x.TrustZoneId != nil {
		return *x.TrustZoneId
	}
	return ""
}

type ListNodeSelectorsResponse struct {
	state         protoimpl.MessageState                              `protogen:"open.v1"`
	Selectors     map[string]*ListNodeSelectorsResponse_NodeSelectors `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeSelectorsResponse) Reset() {
	*x = ListNodeSelectorsResponse{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeSelectorsResponse) ProtoMessage() {}

func (x *ListNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListNodeSelectorsResponse) GetSelectors() map[string]*ListNodeSelectorsResponse_NodeSelectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

// Filters nodes by selectors
type ListAttestedNodesRequest_BySelectors struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Selectors     []*Selector                            `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	Match         ListAttestedNodesRequest_MatchBehavior `protobuf:"varint,2,opt,name=match,proto3,enum=proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest_MatchBehavior" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttestedNodesRequest_BySelectors) Reset() {
	*x = ListAttestedNodesRequest_BySelectors{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttestedNodesRequest_BySelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestedNodesRequest_BySelectors) ProtoMessage() {}

func (x *ListAttestedNodesRequest_BySelectors) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestedNodesRequest_BySelectors.ProtoReflect.Descriptor instead.
func (*ListAttestedNodesRequest_BySelectors) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListAttestedNodesRequest_BySelectors) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *ListAttestedNodesRequest_BySelectors) GetMatch() ListAttestedNodesRequest_MatchBehavior {
	if x != nil {
		return x.Match
	}
	return ListAttestedNodesRequest_MATCH_BEHAVIOR_EXACT_UNSPECIFIED
}

type ListNodeSelectorsResponse_NodeSelectors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Selectors     []*Selector            `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeSelectorsResponse_NodeSelectors) Reset() {
	*x = ListNodeSelectorsResponse_NodeSelectors{}
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeSelectorsResponse_NodeSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeSelectorsResponse_NodeSelectors) ProtoMessage() {}

func (x *ListNodeSelectorsResponse_NodeSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeSelectorsResponse_NodeSelectors.ProtoReflect.Descriptor instead.
func (*ListNodeSelectorsResponse_NodeSelectors) Descriptor() ([]byte, []int) {
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListNodeSelectorsResponse_NodeSelectors) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

var File_proto_connect_datastore_service_v1alpha1_datastore_service_proto protoreflect.FileDescriptor

var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc = string([]byte{
	0x0a, 0x40, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x38, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x19, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x32,
	0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0d,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x73, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x72,
	0x0a, 0x18, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x22, 0x75, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x9f,
	0x02, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x65, 0x77,
	0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65,
	0x77, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x22, 0x76, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x07, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x62, 0x79, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x79,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x08, 0x62, 0x79, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x62, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x62, 0x79, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a,
	0x11, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x03, 0x52, 0x0f, 0x62, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x62, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0d, 0x62, 0x79, 0x43, 0x61, 0x6e, 0x52, 0x65,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x1a, 0xc7, 0x01, 0x0a, 0x0b, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x8b, 0x01, 0x0a,
	0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f,
	0x52, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x71, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x50,
	0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x22, 0xc3, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x82, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x61, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x0e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x67, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xaf, 0x0b, 0x0a,
	0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x42,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x41, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x9c, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x52,
	0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x66,
	0x69, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescOnce sync.Once
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescData []byte
)

func file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescGZIP() []byte {
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescOnce.Do(func() {
		file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc), len(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc)))
	})
	return file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDescData
}

var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_goTypes = []any{
	(ListAttestedNodesRequest_MatchBehavior)(0),     // 0: proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest.MatchBehavior
	(*CountAttestedNodesRequest)(nil),               // 1: proto.connect.datastore_service.v1alpha1.CountAttestedNodesRequest
	(*CountAttestedNodesResponse)(nil),              // 2: proto.connect.datastore_service.v1alpha1.CountAttestedNodesResponse
	(*CreateAttestedNodeRequest)(nil),               // 3: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeRequest
	(*CreateAttestedNodeResponse)(nil),              // 4: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeResponse
	(*DeleteAttestedNodeRequest)(nil),               // 5: proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeRequest
	(*DeleteAttestedNodeResponse)(nil),              // 6: proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeResponse
	(*FetchAttestedNodeRequest)(nil),                // 7: proto.connect.datastore_service.v1alpha1.FetchAttestedNodeRequest
	(*FetchAttestedNodeResponse)(nil),               // 8: proto.connect.datastore_service.v1alpha1.FetchAttestedNodeResponse
	(*UpdateAttestedNodeRequest)(nil),               // 9: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeRequest
	(*AttestedNodeMask)(nil),                        // 10: proto.connect.datastore_service.v1alpha1.AttestedNodeMask
	(*UpdateAttestedNodeResponse)(nil),              // 11: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeResponse
	(*ListAttestedNodesRequest)(nil),                // 12: proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest
	(*ListAttestedNodesResponse)(nil),               // 13: proto.connect.datastore_service.v1alpha1.ListAttestedNodesResponse
	(*GetNodeSelectorsRequest)(nil),                 // 14: proto.connect.datastore_service.v1alpha1.GetNodeSelectorsRequest
	(*GetNodeSelectorsResponse)(nil),                // 15: proto.connect.datastore_service.v1alpha1.GetNodeSelectorsResponse
	(*SetNodeSelectorsRequest)(nil),                 // 16: proto.connect.datastore_service.v1alpha1.SetNodeSelectorsRequest
	(*SetNodeSelectorsResponse)(nil),                // 17: proto.connect.datastore_service.v1alpha1.SetNodeSelectorsResponse
	(*ListNodeSelectorsRequest)(nil),                // 18: proto.connect.datastore_service.v1alpha1.ListNodeSelectorsRequest
	(*ListNodeSelectorsResponse)(nil),               // 19: proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse
	(*ListAttestedNodesRequest_BySelectors)(nil),    // 20: proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest.BySelectors
	(*ListNodeSelectorsResponse_NodeSelectors)(nil), // 21: proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse.NodeSelectors
	nil,                  // 22: proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse.SelectorsEntry
	(*AttestedNode)(nil), // 23: proto.connect.datastore_service.v1alpha1.AttestedNode
	(*Selector)(nil),     // 24: proto.connect.datastore_service.v1alpha1.Selector
}
var file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_depIdxs = []int32{
	23, // 0: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeRequest.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	23, // 1: proto.connect.datastore_service.v1alpha1.CreateAttestedNodeResponse.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	23, // 2: proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeResponse.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	23, // 3: proto.connect.datastore_service.v1alpha1.FetchAttestedNodeResponse.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	23, // 4: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeRequest.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	10, // 5: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeRequest.mask:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNodeMask
	23, // 6: proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeResponse.node:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	20, // 7: proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest.by_selector_match:type_name -> proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest.BySelectors
	23, // 8: proto.connect.datastore_service.v1alpha1.ListAttestedNodesResponse.nodes:type_name -> proto.connect.datastore_service.v1alpha1.AttestedNode
	24, // 9: proto.connect.datastore_service.v1alpha1.GetNodeSelectorsResponse.selectors:type_name -> proto.connect.datastore_service.v1alpha1.Selector
	24, // 10: proto.connect.datastore_service.v1alpha1.SetNodeSelectorsRequest.selectors:type_name -> proto.connect.datastore_service.v1alpha1.Selector
	22, // 11: proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse.selectors:type_name -> proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse.SelectorsEntry
	24, // 12: proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest.BySelectors.selectors:type_name -> proto.connect.datastore_service.v1alpha1.Selector
	0,  // 13: proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest.BySelectors.match:type_name -> proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest.MatchBehavior
	24, // 14: proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse.NodeSelectors.selectors:type_name -> proto.connect.datastore_service.v1alpha1.Selector
	21, // 15: proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse.SelectorsEntry.value:type_name -> proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse.NodeSelectors
	1,  // 16: proto.connect.datastore_service.v1alpha1.DataStoreService.CountAttestedNodes:input_type -> proto.connect.datastore_service.v1alpha1.CountAttestedNodesRequest
	3,  // 17: proto.connect.datastore_service.v1alpha1.DataStoreService.CreateAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.CreateAttestedNodeRequest
	5,  // 18: proto.connect.datastore_service.v1alpha1.DataStoreService.DeleteAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeRequest
	7,  // 19: proto.connect.datastore_service.v1alpha1.DataStoreService.FetchAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.FetchAttestedNodeRequest
	9,  // 20: proto.connect.datastore_service.v1alpha1.DataStoreService.UpdateAttestedNode:input_type -> proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeRequest
	12, // 21: proto.connect.datastore_service.v1alpha1.DataStoreService.ListAttestedNodes:input_type -> proto.connect.datastore_service.v1alpha1.ListAttestedNodesRequest
	14, // 22: proto.connect.datastore_service.v1alpha1.DataStoreService.GetNodeSelectors:input_type -> proto.connect.datastore_service.v1alpha1.GetNodeSelectorsRequest
	16, // 23: proto.connect.datastore_service.v1alpha1.DataStoreService.SetNodeSelectors:input_type -> proto.connect.datastore_service.v1alpha1.SetNodeSelectorsRequest
	18, // 24: proto.connect.datastore_service.v1alpha1.DataStoreService.ListNodeSelectors:input_type -> proto.connect.datastore_service.v1alpha1.ListNodeSelectorsRequest
	2,  // 25: proto.connect.datastore_service.v1alpha1.DataStoreService.CountAttestedNodes:output_type -> proto.connect.datastore_service.v1alpha1.CountAttestedNodesResponse
	4,  // 26: proto.connect.datastore_service.v1alpha1.DataStoreService.CreateAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.CreateAttestedNodeResponse
	6,  // 27: proto.connect.datastore_service.v1alpha1.DataStoreService.DeleteAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.DeleteAttestedNodeResponse
	8,  // 28: proto.connect.datastore_service.v1alpha1.DataStoreService.FetchAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.FetchAttestedNodeResponse
	11, // 29: proto.connect.datastore_service.v1alpha1.DataStoreService.UpdateAttestedNode:output_type -> proto.connect.datastore_service.v1alpha1.UpdateAttestedNodeResponse
	13, // 30: proto.connect.datastore_service.v1alpha1.DataStoreService.ListAttestedNodes:output_type -> proto.connect.datastore_service.v1alpha1.ListAttestedNodesResponse
	15, // 31: proto.connect.datastore_service.v1alpha1.DataStoreService.GetNodeSelectors:output_type -> proto.connect.datastore_service.v1alpha1.GetNodeSelectorsResponse
	17, // 32: proto.connect.datastore_service.v1alpha1.DataStoreService.SetNodeSelectors:output_type -> proto.connect.datastore_service.v1alpha1.SetNodeSelectorsResponse
	19, // 33: proto.connect.datastore_service.v1alpha1.DataStoreService.ListNodeSelectors:output_type -> proto.connect.datastore_service.v1alpha1.ListNodeSelectorsResponse
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_init() }
func file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_init() {
	if File_proto_connect_datastore_service_v1alpha1_datastore_service_proto != nil {
		return
	}
	file_proto_connect_datastore_service_v1alpha1_datastore_proto_init()
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[7].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[11].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[13].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[15].OneofWrappers = []any{}
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc), len(file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_goTypes,
		DependencyIndexes: file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_depIdxs,
		EnumInfos:         file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_enumTypes,
		MessageInfos:      file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_msgTypes,
	}.Build()
	File_proto_connect_datastore_service_v1alpha1_datastore_service_proto = out.File
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_goTypes = nil
	file_proto_connect_datastore_service_v1alpha1_datastore_service_proto_depIdxs = nil
}
