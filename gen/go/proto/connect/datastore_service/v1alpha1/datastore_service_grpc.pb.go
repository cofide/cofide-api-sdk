// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/connect/datastore_service/v1alpha1/datastore_service.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataStoreService_CountAttestedNodes_FullMethodName = "/proto.connect.datastore_service.v1alpha1.DataStoreService/CountAttestedNodes"
	DataStoreService_CreateAttestedNode_FullMethodName = "/proto.connect.datastore_service.v1alpha1.DataStoreService/CreateAttestedNode"
	DataStoreService_DeleteAttestedNode_FullMethodName = "/proto.connect.datastore_service.v1alpha1.DataStoreService/DeleteAttestedNode"
	DataStoreService_FetchAttestedNode_FullMethodName  = "/proto.connect.datastore_service.v1alpha1.DataStoreService/FetchAttestedNode"
	DataStoreService_UpdateAttestedNode_FullMethodName = "/proto.connect.datastore_service.v1alpha1.DataStoreService/UpdateAttestedNode"
	DataStoreService_ListAttestedNodes_FullMethodName  = "/proto.connect.datastore_service.v1alpha1.DataStoreService/ListAttestedNodes"
	DataStoreService_GetNodeSelectors_FullMethodName   = "/proto.connect.datastore_service.v1alpha1.DataStoreService/GetNodeSelectors"
	DataStoreService_SetNodeSelectors_FullMethodName   = "/proto.connect.datastore_service.v1alpha1.DataStoreService/SetNodeSelectors"
	DataStoreService_ListNodeSelectors_FullMethodName  = "/proto.connect.datastore_service.v1alpha1.DataStoreService/ListNodeSelectors"
)

// DataStoreServiceClient is the client API for DataStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataStoreService defines the gRPC service for the SPIRE server DataStore interface
type DataStoreServiceClient interface {
	// Node operations
	CountAttestedNodes(ctx context.Context, in *CountAttestedNodesRequest, opts ...grpc.CallOption) (*CountAttestedNodesResponse, error)
	CreateAttestedNode(ctx context.Context, in *CreateAttestedNodeRequest, opts ...grpc.CallOption) (*CreateAttestedNodeResponse, error)
	DeleteAttestedNode(ctx context.Context, in *DeleteAttestedNodeRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeResponse, error)
	FetchAttestedNode(ctx context.Context, in *FetchAttestedNodeRequest, opts ...grpc.CallOption) (*FetchAttestedNodeResponse, error)
	UpdateAttestedNode(ctx context.Context, in *UpdateAttestedNodeRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeResponse, error)
	ListAttestedNodes(ctx context.Context, in *ListAttestedNodesRequest, opts ...grpc.CallOption) (*ListAttestedNodesResponse, error)
	// Node Selector operations
	GetNodeSelectors(ctx context.Context, in *GetNodeSelectorsRequest, opts ...grpc.CallOption) (*GetNodeSelectorsResponse, error)
	SetNodeSelectors(ctx context.Context, in *SetNodeSelectorsRequest, opts ...grpc.CallOption) (*SetNodeSelectorsResponse, error)
	ListNodeSelectors(ctx context.Context, in *ListNodeSelectorsRequest, opts ...grpc.CallOption) (*ListNodeSelectorsResponse, error)
}

type dataStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStoreServiceClient(cc grpc.ClientConnInterface) DataStoreServiceClient {
	return &dataStoreServiceClient{cc}
}

func (c *dataStoreServiceClient) CountAttestedNodes(ctx context.Context, in *CountAttestedNodesRequest, opts ...grpc.CallOption) (*CountAttestedNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountAttestedNodesResponse)
	err := c.cc.Invoke(ctx, DataStoreService_CountAttestedNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) CreateAttestedNode(ctx context.Context, in *CreateAttestedNodeRequest, opts ...grpc.CallOption) (*CreateAttestedNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAttestedNodeResponse)
	err := c.cc.Invoke(ctx, DataStoreService_CreateAttestedNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) DeleteAttestedNode(ctx context.Context, in *DeleteAttestedNodeRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAttestedNodeResponse)
	err := c.cc.Invoke(ctx, DataStoreService_DeleteAttestedNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) FetchAttestedNode(ctx context.Context, in *FetchAttestedNodeRequest, opts ...grpc.CallOption) (*FetchAttestedNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchAttestedNodeResponse)
	err := c.cc.Invoke(ctx, DataStoreService_FetchAttestedNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) UpdateAttestedNode(ctx context.Context, in *UpdateAttestedNodeRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAttestedNodeResponse)
	err := c.cc.Invoke(ctx, DataStoreService_UpdateAttestedNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) ListAttestedNodes(ctx context.Context, in *ListAttestedNodesRequest, opts ...grpc.CallOption) (*ListAttestedNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttestedNodesResponse)
	err := c.cc.Invoke(ctx, DataStoreService_ListAttestedNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) GetNodeSelectors(ctx context.Context, in *GetNodeSelectorsRequest, opts ...grpc.CallOption) (*GetNodeSelectorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodeSelectorsResponse)
	err := c.cc.Invoke(ctx, DataStoreService_GetNodeSelectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) SetNodeSelectors(ctx context.Context, in *SetNodeSelectorsRequest, opts ...grpc.CallOption) (*SetNodeSelectorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNodeSelectorsResponse)
	err := c.cc.Invoke(ctx, DataStoreService_SetNodeSelectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreServiceClient) ListNodeSelectors(ctx context.Context, in *ListNodeSelectorsRequest, opts ...grpc.CallOption) (*ListNodeSelectorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodeSelectorsResponse)
	err := c.cc.Invoke(ctx, DataStoreService_ListNodeSelectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStoreServiceServer is the server API for DataStoreService service.
// All implementations should embed UnimplementedDataStoreServiceServer
// for forward compatibility.
//
// DataStoreService defines the gRPC service for the SPIRE server DataStore interface
type DataStoreServiceServer interface {
	// Node operations
	CountAttestedNodes(context.Context, *CountAttestedNodesRequest) (*CountAttestedNodesResponse, error)
	CreateAttestedNode(context.Context, *CreateAttestedNodeRequest) (*CreateAttestedNodeResponse, error)
	DeleteAttestedNode(context.Context, *DeleteAttestedNodeRequest) (*DeleteAttestedNodeResponse, error)
	FetchAttestedNode(context.Context, *FetchAttestedNodeRequest) (*FetchAttestedNodeResponse, error)
	UpdateAttestedNode(context.Context, *UpdateAttestedNodeRequest) (*UpdateAttestedNodeResponse, error)
	ListAttestedNodes(context.Context, *ListAttestedNodesRequest) (*ListAttestedNodesResponse, error)
	// Node Selector operations
	GetNodeSelectors(context.Context, *GetNodeSelectorsRequest) (*GetNodeSelectorsResponse, error)
	SetNodeSelectors(context.Context, *SetNodeSelectorsRequest) (*SetNodeSelectorsResponse, error)
	ListNodeSelectors(context.Context, *ListNodeSelectorsRequest) (*ListNodeSelectorsResponse, error)
}

// UnimplementedDataStoreServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataStoreServiceServer struct{}

func (UnimplementedDataStoreServiceServer) CountAttestedNodes(context.Context, *CountAttestedNodesRequest) (*CountAttestedNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAttestedNodes not implemented")
}
func (UnimplementedDataStoreServiceServer) CreateAttestedNode(context.Context, *CreateAttestedNodeRequest) (*CreateAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttestedNode not implemented")
}
func (UnimplementedDataStoreServiceServer) DeleteAttestedNode(context.Context, *DeleteAttestedNodeRequest) (*DeleteAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttestedNode not implemented")
}
func (UnimplementedDataStoreServiceServer) FetchAttestedNode(context.Context, *FetchAttestedNodeRequest) (*FetchAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAttestedNode not implemented")
}
func (UnimplementedDataStoreServiceServer) UpdateAttestedNode(context.Context, *UpdateAttestedNodeRequest) (*UpdateAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttestedNode not implemented")
}
func (UnimplementedDataStoreServiceServer) ListAttestedNodes(context.Context, *ListAttestedNodesRequest) (*ListAttestedNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttestedNodes not implemented")
}
func (UnimplementedDataStoreServiceServer) GetNodeSelectors(context.Context, *GetNodeSelectorsRequest) (*GetNodeSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSelectors not implemented")
}
func (UnimplementedDataStoreServiceServer) SetNodeSelectors(context.Context, *SetNodeSelectorsRequest) (*SetNodeSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeSelectors not implemented")
}
func (UnimplementedDataStoreServiceServer) ListNodeSelectors(context.Context, *ListNodeSelectorsRequest) (*ListNodeSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeSelectors not implemented")
}
func (UnimplementedDataStoreServiceServer) testEmbeddedByValue() {}

// UnsafeDataStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStoreServiceServer will
// result in compilation errors.
type UnsafeDataStoreServiceServer interface {
	mustEmbedUnimplementedDataStoreServiceServer()
}

func RegisterDataStoreServiceServer(s grpc.ServiceRegistrar, srv DataStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataStoreService_ServiceDesc, srv)
}

func _DataStoreService_CountAttestedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAttestedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).CountAttestedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_CountAttestedNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).CountAttestedNodes(ctx, req.(*CountAttestedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_CreateAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).CreateAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_CreateAttestedNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).CreateAttestedNode(ctx, req.(*CreateAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_DeleteAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).DeleteAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_DeleteAttestedNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).DeleteAttestedNode(ctx, req.(*DeleteAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_FetchAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).FetchAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_FetchAttestedNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).FetchAttestedNode(ctx, req.(*FetchAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_UpdateAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).UpdateAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_UpdateAttestedNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).UpdateAttestedNode(ctx, req.(*UpdateAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_ListAttestedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttestedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).ListAttestedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_ListAttestedNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).ListAttestedNodes(ctx, req.(*ListAttestedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_GetNodeSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).GetNodeSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_GetNodeSelectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).GetNodeSelectors(ctx, req.(*GetNodeSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_SetNodeSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).SetNodeSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_SetNodeSelectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).SetNodeSelectors(ctx, req.(*SetNodeSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStoreService_ListNodeSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServiceServer).ListNodeSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStoreService_ListNodeSelectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServiceServer).ListNodeSelectors(ctx, req.(*ListNodeSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataStoreService_ServiceDesc is the grpc.ServiceDesc for DataStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.connect.datastore_service.v1alpha1.DataStoreService",
	HandlerType: (*DataStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountAttestedNodes",
			Handler:    _DataStoreService_CountAttestedNodes_Handler,
		},
		{
			MethodName: "CreateAttestedNode",
			Handler:    _DataStoreService_CreateAttestedNode_Handler,
		},
		{
			MethodName: "DeleteAttestedNode",
			Handler:    _DataStoreService_DeleteAttestedNode_Handler,
		},
		{
			MethodName: "FetchAttestedNode",
			Handler:    _DataStoreService_FetchAttestedNode_Handler,
		},
		{
			MethodName: "UpdateAttestedNode",
			Handler:    _DataStoreService_UpdateAttestedNode_Handler,
		},
		{
			MethodName: "ListAttestedNodes",
			Handler:    _DataStoreService_ListAttestedNodes_Handler,
		},
		{
			MethodName: "GetNodeSelectors",
			Handler:    _DataStoreService_GetNodeSelectors_Handler,
		},
		{
			MethodName: "SetNodeSelectors",
			Handler:    _DataStoreService_SetNodeSelectors_Handler,
		},
		{
			MethodName: "ListNodeSelectors",
			Handler:    _DataStoreService_ListNodeSelectors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connect/datastore_service/v1alpha1/datastore_service.proto",
}
