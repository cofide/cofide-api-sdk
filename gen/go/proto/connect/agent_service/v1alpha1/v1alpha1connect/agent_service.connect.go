// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/agent_service/v1alpha1/agent_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/agent_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "proto.connect.agent_service.v1alpha1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceCreateAgentJoinTokenProcedure is the fully-qualified name of the AgentService's
	// CreateAgentJoinToken RPC.
	AgentServiceCreateAgentJoinTokenProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/CreateAgentJoinToken"
	// AgentServiceUpdateTrustZoneBundleProcedure is the fully-qualified name of the AgentService's
	// UpdateTrustZoneBundle RPC.
	AgentServiceUpdateTrustZoneBundleProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/UpdateTrustZoneBundle"
	// AgentServiceUpdateAgentStatusProcedure is the fully-qualified name of the AgentService's
	// UpdateAgentStatus RPC.
	AgentServiceUpdateAgentStatusProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/UpdateAgentStatus"
	// AgentServiceRegisterFederatedServiceProcedure is the fully-qualified name of the AgentService's
	// RegisterFederatedService RPC.
	AgentServiceRegisterFederatedServiceProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/RegisterFederatedService"
	// AgentServiceDeregisterFederatedServiceProcedure is the fully-qualified name of the AgentService's
	// DeregisterFederatedService RPC.
	AgentServiceDeregisterFederatedServiceProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/DeregisterFederatedService"
	// AgentServiceUpdateFederatedServiceProcedure is the fully-qualified name of the AgentService's
	// UpdateFederatedService RPC.
	AgentServiceUpdateFederatedServiceProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/UpdateFederatedService"
	// AgentServiceGetFederatedServiceProcedure is the fully-qualified name of the AgentService's
	// GetFederatedService RPC.
	AgentServiceGetFederatedServiceProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/GetFederatedService"
	// AgentServiceListFederatedServicesProcedure is the fully-qualified name of the AgentService's
	// ListFederatedServices RPC.
	AgentServiceListFederatedServicesProcedure = "/proto.connect.agent_service.v1alpha1.AgentService/ListFederatedServices"
)

// AgentServiceClient is a client for the proto.connect.agent_service.v1alpha1.AgentService service.
type AgentServiceClient interface {
	CreateAgentJoinToken(context.Context, *connect.Request[v1alpha1.CreateAgentJoinTokenRequest]) (*connect.Response[v1alpha1.CreateAgentJoinTokenResponse], error)
	UpdateTrustZoneBundle(context.Context, *connect.Request[v1alpha1.UpdateTrustZoneBundleRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneBundleResponse], error)
	UpdateAgentStatus(context.Context, *connect.Request[v1alpha1.UpdateAgentStatusRequest]) (*connect.Response[v1alpha1.UpdateAgentStatusResponse], error)
	RegisterFederatedService(context.Context, *connect.Request[v1alpha1.RegisterFederatedServiceRequest]) (*connect.Response[v1alpha1.RegisterFederatedServiceResponse], error)
	DeregisterFederatedService(context.Context, *connect.Request[v1alpha1.DeregisterFederatedServiceRequest]) (*connect.Response[v1alpha1.DeregisterFederatedServiceResponse], error)
	UpdateFederatedService(context.Context, *connect.Request[v1alpha1.UpdateFederatedServiceRequest]) (*connect.Response[v1alpha1.UpdateFederatedServiceResponse], error)
	GetFederatedService(context.Context, *connect.Request[v1alpha1.GetFederatedServiceRequest]) (*connect.Response[v1alpha1.GetFederatedServiceResponse], error)
	ListFederatedServices(context.Context, *connect.Request[v1alpha1.ListFederatedServicesRequest]) (*connect.Response[v1alpha1.ListFederatedServicesResponse], error)
}

// NewAgentServiceClient constructs a client for the
// proto.connect.agent_service.v1alpha1.AgentService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	agentServiceMethods := v1alpha1.File_proto_connect_agent_service_v1alpha1_agent_service_proto.Services().ByName("AgentService").Methods()
	return &agentServiceClient{
		createAgentJoinToken: connect.NewClient[v1alpha1.CreateAgentJoinTokenRequest, v1alpha1.CreateAgentJoinTokenResponse](
			httpClient,
			baseURL+AgentServiceCreateAgentJoinTokenProcedure,
			connect.WithSchema(agentServiceMethods.ByName("CreateAgentJoinToken")),
			connect.WithClientOptions(opts...),
		),
		updateTrustZoneBundle: connect.NewClient[v1alpha1.UpdateTrustZoneBundleRequest, v1alpha1.UpdateTrustZoneBundleResponse](
			httpClient,
			baseURL+AgentServiceUpdateTrustZoneBundleProcedure,
			connect.WithSchema(agentServiceMethods.ByName("UpdateTrustZoneBundle")),
			connect.WithClientOptions(opts...),
		),
		updateAgentStatus: connect.NewClient[v1alpha1.UpdateAgentStatusRequest, v1alpha1.UpdateAgentStatusResponse](
			httpClient,
			baseURL+AgentServiceUpdateAgentStatusProcedure,
			connect.WithSchema(agentServiceMethods.ByName("UpdateAgentStatus")),
			connect.WithClientOptions(opts...),
		),
		registerFederatedService: connect.NewClient[v1alpha1.RegisterFederatedServiceRequest, v1alpha1.RegisterFederatedServiceResponse](
			httpClient,
			baseURL+AgentServiceRegisterFederatedServiceProcedure,
			connect.WithSchema(agentServiceMethods.ByName("RegisterFederatedService")),
			connect.WithClientOptions(opts...),
		),
		deregisterFederatedService: connect.NewClient[v1alpha1.DeregisterFederatedServiceRequest, v1alpha1.DeregisterFederatedServiceResponse](
			httpClient,
			baseURL+AgentServiceDeregisterFederatedServiceProcedure,
			connect.WithSchema(agentServiceMethods.ByName("DeregisterFederatedService")),
			connect.WithClientOptions(opts...),
		),
		updateFederatedService: connect.NewClient[v1alpha1.UpdateFederatedServiceRequest, v1alpha1.UpdateFederatedServiceResponse](
			httpClient,
			baseURL+AgentServiceUpdateFederatedServiceProcedure,
			connect.WithSchema(agentServiceMethods.ByName("UpdateFederatedService")),
			connect.WithClientOptions(opts...),
		),
		getFederatedService: connect.NewClient[v1alpha1.GetFederatedServiceRequest, v1alpha1.GetFederatedServiceResponse](
			httpClient,
			baseURL+AgentServiceGetFederatedServiceProcedure,
			connect.WithSchema(agentServiceMethods.ByName("GetFederatedService")),
			connect.WithClientOptions(opts...),
		),
		listFederatedServices: connect.NewClient[v1alpha1.ListFederatedServicesRequest, v1alpha1.ListFederatedServicesResponse](
			httpClient,
			baseURL+AgentServiceListFederatedServicesProcedure,
			connect.WithSchema(agentServiceMethods.ByName("ListFederatedServices")),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	createAgentJoinToken       *connect.Client[v1alpha1.CreateAgentJoinTokenRequest, v1alpha1.CreateAgentJoinTokenResponse]
	updateTrustZoneBundle      *connect.Client[v1alpha1.UpdateTrustZoneBundleRequest, v1alpha1.UpdateTrustZoneBundleResponse]
	updateAgentStatus          *connect.Client[v1alpha1.UpdateAgentStatusRequest, v1alpha1.UpdateAgentStatusResponse]
	registerFederatedService   *connect.Client[v1alpha1.RegisterFederatedServiceRequest, v1alpha1.RegisterFederatedServiceResponse]
	deregisterFederatedService *connect.Client[v1alpha1.DeregisterFederatedServiceRequest, v1alpha1.DeregisterFederatedServiceResponse]
	updateFederatedService     *connect.Client[v1alpha1.UpdateFederatedServiceRequest, v1alpha1.UpdateFederatedServiceResponse]
	getFederatedService        *connect.Client[v1alpha1.GetFederatedServiceRequest, v1alpha1.GetFederatedServiceResponse]
	listFederatedServices      *connect.Client[v1alpha1.ListFederatedServicesRequest, v1alpha1.ListFederatedServicesResponse]
}

// CreateAgentJoinToken calls
// proto.connect.agent_service.v1alpha1.AgentService.CreateAgentJoinToken.
func (c *agentServiceClient) CreateAgentJoinToken(ctx context.Context, req *connect.Request[v1alpha1.CreateAgentJoinTokenRequest]) (*connect.Response[v1alpha1.CreateAgentJoinTokenResponse], error) {
	return c.createAgentJoinToken.CallUnary(ctx, req)
}

// UpdateTrustZoneBundle calls
// proto.connect.agent_service.v1alpha1.AgentService.UpdateTrustZoneBundle.
func (c *agentServiceClient) UpdateTrustZoneBundle(ctx context.Context, req *connect.Request[v1alpha1.UpdateTrustZoneBundleRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneBundleResponse], error) {
	return c.updateTrustZoneBundle.CallUnary(ctx, req)
}

// UpdateAgentStatus calls proto.connect.agent_service.v1alpha1.AgentService.UpdateAgentStatus.
func (c *agentServiceClient) UpdateAgentStatus(ctx context.Context, req *connect.Request[v1alpha1.UpdateAgentStatusRequest]) (*connect.Response[v1alpha1.UpdateAgentStatusResponse], error) {
	return c.updateAgentStatus.CallUnary(ctx, req)
}

// RegisterFederatedService calls
// proto.connect.agent_service.v1alpha1.AgentService.RegisterFederatedService.
func (c *agentServiceClient) RegisterFederatedService(ctx context.Context, req *connect.Request[v1alpha1.RegisterFederatedServiceRequest]) (*connect.Response[v1alpha1.RegisterFederatedServiceResponse], error) {
	return c.registerFederatedService.CallUnary(ctx, req)
}

// DeregisterFederatedService calls
// proto.connect.agent_service.v1alpha1.AgentService.DeregisterFederatedService.
func (c *agentServiceClient) DeregisterFederatedService(ctx context.Context, req *connect.Request[v1alpha1.DeregisterFederatedServiceRequest]) (*connect.Response[v1alpha1.DeregisterFederatedServiceResponse], error) {
	return c.deregisterFederatedService.CallUnary(ctx, req)
}

// UpdateFederatedService calls
// proto.connect.agent_service.v1alpha1.AgentService.UpdateFederatedService.
func (c *agentServiceClient) UpdateFederatedService(ctx context.Context, req *connect.Request[v1alpha1.UpdateFederatedServiceRequest]) (*connect.Response[v1alpha1.UpdateFederatedServiceResponse], error) {
	return c.updateFederatedService.CallUnary(ctx, req)
}

// GetFederatedService calls proto.connect.agent_service.v1alpha1.AgentService.GetFederatedService.
func (c *agentServiceClient) GetFederatedService(ctx context.Context, req *connect.Request[v1alpha1.GetFederatedServiceRequest]) (*connect.Response[v1alpha1.GetFederatedServiceResponse], error) {
	return c.getFederatedService.CallUnary(ctx, req)
}

// ListFederatedServices calls
// proto.connect.agent_service.v1alpha1.AgentService.ListFederatedServices.
func (c *agentServiceClient) ListFederatedServices(ctx context.Context, req *connect.Request[v1alpha1.ListFederatedServicesRequest]) (*connect.Response[v1alpha1.ListFederatedServicesResponse], error) {
	return c.listFederatedServices.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the proto.connect.agent_service.v1alpha1.AgentService
// service.
type AgentServiceHandler interface {
	CreateAgentJoinToken(context.Context, *connect.Request[v1alpha1.CreateAgentJoinTokenRequest]) (*connect.Response[v1alpha1.CreateAgentJoinTokenResponse], error)
	UpdateTrustZoneBundle(context.Context, *connect.Request[v1alpha1.UpdateTrustZoneBundleRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneBundleResponse], error)
	UpdateAgentStatus(context.Context, *connect.Request[v1alpha1.UpdateAgentStatusRequest]) (*connect.Response[v1alpha1.UpdateAgentStatusResponse], error)
	RegisterFederatedService(context.Context, *connect.Request[v1alpha1.RegisterFederatedServiceRequest]) (*connect.Response[v1alpha1.RegisterFederatedServiceResponse], error)
	DeregisterFederatedService(context.Context, *connect.Request[v1alpha1.DeregisterFederatedServiceRequest]) (*connect.Response[v1alpha1.DeregisterFederatedServiceResponse], error)
	UpdateFederatedService(context.Context, *connect.Request[v1alpha1.UpdateFederatedServiceRequest]) (*connect.Response[v1alpha1.UpdateFederatedServiceResponse], error)
	GetFederatedService(context.Context, *connect.Request[v1alpha1.GetFederatedServiceRequest]) (*connect.Response[v1alpha1.GetFederatedServiceResponse], error)
	ListFederatedServices(context.Context, *connect.Request[v1alpha1.ListFederatedServicesRequest]) (*connect.Response[v1alpha1.ListFederatedServicesResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceMethods := v1alpha1.File_proto_connect_agent_service_v1alpha1_agent_service_proto.Services().ByName("AgentService").Methods()
	agentServiceCreateAgentJoinTokenHandler := connect.NewUnaryHandler(
		AgentServiceCreateAgentJoinTokenProcedure,
		svc.CreateAgentJoinToken,
		connect.WithSchema(agentServiceMethods.ByName("CreateAgentJoinToken")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateTrustZoneBundleHandler := connect.NewUnaryHandler(
		AgentServiceUpdateTrustZoneBundleProcedure,
		svc.UpdateTrustZoneBundle,
		connect.WithSchema(agentServiceMethods.ByName("UpdateTrustZoneBundle")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateAgentStatusHandler := connect.NewUnaryHandler(
		AgentServiceUpdateAgentStatusProcedure,
		svc.UpdateAgentStatus,
		connect.WithSchema(agentServiceMethods.ByName("UpdateAgentStatus")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceRegisterFederatedServiceHandler := connect.NewUnaryHandler(
		AgentServiceRegisterFederatedServiceProcedure,
		svc.RegisterFederatedService,
		connect.WithSchema(agentServiceMethods.ByName("RegisterFederatedService")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeregisterFederatedServiceHandler := connect.NewUnaryHandler(
		AgentServiceDeregisterFederatedServiceProcedure,
		svc.DeregisterFederatedService,
		connect.WithSchema(agentServiceMethods.ByName("DeregisterFederatedService")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateFederatedServiceHandler := connect.NewUnaryHandler(
		AgentServiceUpdateFederatedServiceProcedure,
		svc.UpdateFederatedService,
		connect.WithSchema(agentServiceMethods.ByName("UpdateFederatedService")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetFederatedServiceHandler := connect.NewUnaryHandler(
		AgentServiceGetFederatedServiceProcedure,
		svc.GetFederatedService,
		connect.WithSchema(agentServiceMethods.ByName("GetFederatedService")),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceListFederatedServicesHandler := connect.NewUnaryHandler(
		AgentServiceListFederatedServicesProcedure,
		svc.ListFederatedServices,
		connect.WithSchema(agentServiceMethods.ByName("ListFederatedServices")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.agent_service.v1alpha1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceCreateAgentJoinTokenProcedure:
			agentServiceCreateAgentJoinTokenHandler.ServeHTTP(w, r)
		case AgentServiceUpdateTrustZoneBundleProcedure:
			agentServiceUpdateTrustZoneBundleHandler.ServeHTTP(w, r)
		case AgentServiceUpdateAgentStatusProcedure:
			agentServiceUpdateAgentStatusHandler.ServeHTTP(w, r)
		case AgentServiceRegisterFederatedServiceProcedure:
			agentServiceRegisterFederatedServiceHandler.ServeHTTP(w, r)
		case AgentServiceDeregisterFederatedServiceProcedure:
			agentServiceDeregisterFederatedServiceHandler.ServeHTTP(w, r)
		case AgentServiceUpdateFederatedServiceProcedure:
			agentServiceUpdateFederatedServiceHandler.ServeHTTP(w, r)
		case AgentServiceGetFederatedServiceProcedure:
			agentServiceGetFederatedServiceHandler.ServeHTTP(w, r)
		case AgentServiceListFederatedServicesProcedure:
			agentServiceListFederatedServicesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) CreateAgentJoinToken(context.Context, *connect.Request[v1alpha1.CreateAgentJoinTokenRequest]) (*connect.Response[v1alpha1.CreateAgentJoinTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.CreateAgentJoinToken is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateTrustZoneBundle(context.Context, *connect.Request[v1alpha1.UpdateTrustZoneBundleRequest]) (*connect.Response[v1alpha1.UpdateTrustZoneBundleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.UpdateTrustZoneBundle is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateAgentStatus(context.Context, *connect.Request[v1alpha1.UpdateAgentStatusRequest]) (*connect.Response[v1alpha1.UpdateAgentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.UpdateAgentStatus is not implemented"))
}

func (UnimplementedAgentServiceHandler) RegisterFederatedService(context.Context, *connect.Request[v1alpha1.RegisterFederatedServiceRequest]) (*connect.Response[v1alpha1.RegisterFederatedServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.RegisterFederatedService is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeregisterFederatedService(context.Context, *connect.Request[v1alpha1.DeregisterFederatedServiceRequest]) (*connect.Response[v1alpha1.DeregisterFederatedServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.DeregisterFederatedService is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateFederatedService(context.Context, *connect.Request[v1alpha1.UpdateFederatedServiceRequest]) (*connect.Response[v1alpha1.UpdateFederatedServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.UpdateFederatedService is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetFederatedService(context.Context, *connect.Request[v1alpha1.GetFederatedServiceRequest]) (*connect.Response[v1alpha1.GetFederatedServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.GetFederatedService is not implemented"))
}

func (UnimplementedAgentServiceHandler) ListFederatedServices(context.Context, *connect.Request[v1alpha1.ListFederatedServicesRequest]) (*connect.Response[v1alpha1.ListFederatedServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.agent_service.v1alpha1.AgentService.ListFederatedServices is not implemented"))
}
