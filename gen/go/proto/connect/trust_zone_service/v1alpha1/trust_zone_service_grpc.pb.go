// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/connect/trust_zone_service/v1alpha1/trust_zone_service.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrustZoneService_CreateTrustZone_FullMethodName         = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/CreateTrustZone"
	TrustZoneService_DestroyTrustZone_FullMethodName        = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/DestroyTrustZone"
	TrustZoneService_GetTrustZone_FullMethodName            = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/GetTrustZone"
	TrustZoneService_ListTrustZones_FullMethodName          = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/ListTrustZones"
	TrustZoneService_UpdateTrustZone_FullMethodName         = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/UpdateTrustZone"
	TrustZoneService_RegisterAgent_FullMethodName           = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/RegisterAgent"
	TrustZoneService_RegisterTrustZoneServer_FullMethodName = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/RegisterTrustZoneServer"
	TrustZoneService_UpdateTrustZoneBundle_FullMethodName   = "/proto.connect.trust_zone_service.v1alpha1.TrustZoneService/UpdateTrustZoneBundle"
)

// TrustZoneServiceClient is the client API for TrustZoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustZoneServiceClient interface {
	CreateTrustZone(ctx context.Context, in *CreateTrustZoneRequest, opts ...grpc.CallOption) (*CreateTrustZoneResponse, error)
	DestroyTrustZone(ctx context.Context, in *DestroyTrustZoneRequest, opts ...grpc.CallOption) (*DestroyTrustZoneResponse, error)
	GetTrustZone(ctx context.Context, in *GetTrustZoneRequest, opts ...grpc.CallOption) (*GetTrustZoneResponse, error)
	ListTrustZones(ctx context.Context, in *ListTrustZonesRequest, opts ...grpc.CallOption) (*ListTrustZonesResponse, error)
	UpdateTrustZone(ctx context.Context, in *UpdateTrustZoneRequest, opts ...grpc.CallOption) (*UpdateTrustZoneResponse, error)
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	RegisterTrustZoneServer(ctx context.Context, in *RegisterTrustZoneServerRequest, opts ...grpc.CallOption) (*RegisterTrustZoneServerResponse, error)
	UpdateTrustZoneBundle(ctx context.Context, in *UpdateTrustZoneBundleRequest, opts ...grpc.CallOption) (*UpdateTrustZoneBundleResponse, error)
}

type trustZoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustZoneServiceClient(cc grpc.ClientConnInterface) TrustZoneServiceClient {
	return &trustZoneServiceClient{cc}
}

func (c *trustZoneServiceClient) CreateTrustZone(ctx context.Context, in *CreateTrustZoneRequest, opts ...grpc.CallOption) (*CreateTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTrustZoneResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_CreateTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustZoneServiceClient) DestroyTrustZone(ctx context.Context, in *DestroyTrustZoneRequest, opts ...grpc.CallOption) (*DestroyTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyTrustZoneResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_DestroyTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustZoneServiceClient) GetTrustZone(ctx context.Context, in *GetTrustZoneRequest, opts ...grpc.CallOption) (*GetTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrustZoneResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_GetTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustZoneServiceClient) ListTrustZones(ctx context.Context, in *ListTrustZonesRequest, opts ...grpc.CallOption) (*ListTrustZonesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrustZonesResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_ListTrustZones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustZoneServiceClient) UpdateTrustZone(ctx context.Context, in *UpdateTrustZoneRequest, opts ...grpc.CallOption) (*UpdateTrustZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrustZoneResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_UpdateTrustZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustZoneServiceClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustZoneServiceClient) RegisterTrustZoneServer(ctx context.Context, in *RegisterTrustZoneServerRequest, opts ...grpc.CallOption) (*RegisterTrustZoneServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTrustZoneServerResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_RegisterTrustZoneServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustZoneServiceClient) UpdateTrustZoneBundle(ctx context.Context, in *UpdateTrustZoneBundleRequest, opts ...grpc.CallOption) (*UpdateTrustZoneBundleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrustZoneBundleResponse)
	err := c.cc.Invoke(ctx, TrustZoneService_UpdateTrustZoneBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrustZoneServiceServer is the server API for TrustZoneService service.
// All implementations should embed UnimplementedTrustZoneServiceServer
// for forward compatibility.
type TrustZoneServiceServer interface {
	CreateTrustZone(context.Context, *CreateTrustZoneRequest) (*CreateTrustZoneResponse, error)
	DestroyTrustZone(context.Context, *DestroyTrustZoneRequest) (*DestroyTrustZoneResponse, error)
	GetTrustZone(context.Context, *GetTrustZoneRequest) (*GetTrustZoneResponse, error)
	ListTrustZones(context.Context, *ListTrustZonesRequest) (*ListTrustZonesResponse, error)
	UpdateTrustZone(context.Context, *UpdateTrustZoneRequest) (*UpdateTrustZoneResponse, error)
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	RegisterTrustZoneServer(context.Context, *RegisterTrustZoneServerRequest) (*RegisterTrustZoneServerResponse, error)
	UpdateTrustZoneBundle(context.Context, *UpdateTrustZoneBundleRequest) (*UpdateTrustZoneBundleResponse, error)
}

// UnimplementedTrustZoneServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrustZoneServiceServer struct{}

func (UnimplementedTrustZoneServiceServer) CreateTrustZone(context.Context, *CreateTrustZoneRequest) (*CreateTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrustZone not implemented")
}
func (UnimplementedTrustZoneServiceServer) DestroyTrustZone(context.Context, *DestroyTrustZoneRequest) (*DestroyTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyTrustZone not implemented")
}
func (UnimplementedTrustZoneServiceServer) GetTrustZone(context.Context, *GetTrustZoneRequest) (*GetTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustZone not implemented")
}
func (UnimplementedTrustZoneServiceServer) ListTrustZones(context.Context, *ListTrustZonesRequest) (*ListTrustZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustZones not implemented")
}
func (UnimplementedTrustZoneServiceServer) UpdateTrustZone(context.Context, *UpdateTrustZoneRequest) (*UpdateTrustZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustZone not implemented")
}
func (UnimplementedTrustZoneServiceServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedTrustZoneServiceServer) RegisterTrustZoneServer(context.Context, *RegisterTrustZoneServerRequest) (*RegisterTrustZoneServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTrustZoneServer not implemented")
}
func (UnimplementedTrustZoneServiceServer) UpdateTrustZoneBundle(context.Context, *UpdateTrustZoneBundleRequest) (*UpdateTrustZoneBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustZoneBundle not implemented")
}
func (UnimplementedTrustZoneServiceServer) testEmbeddedByValue() {}

// UnsafeTrustZoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustZoneServiceServer will
// result in compilation errors.
type UnsafeTrustZoneServiceServer interface {
	mustEmbedUnimplementedTrustZoneServiceServer()
}

func RegisterTrustZoneServiceServer(s grpc.ServiceRegistrar, srv TrustZoneServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrustZoneServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrustZoneService_ServiceDesc, srv)
}

func _TrustZoneService_CreateTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).CreateTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_CreateTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).CreateTrustZone(ctx, req.(*CreateTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustZoneService_DestroyTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).DestroyTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_DestroyTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).DestroyTrustZone(ctx, req.(*DestroyTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustZoneService_GetTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).GetTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_GetTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).GetTrustZone(ctx, req.(*GetTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustZoneService_ListTrustZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrustZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).ListTrustZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_ListTrustZones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).ListTrustZones(ctx, req.(*ListTrustZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustZoneService_UpdateTrustZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).UpdateTrustZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_UpdateTrustZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).UpdateTrustZone(ctx, req.(*UpdateTrustZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustZoneService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustZoneService_RegisterTrustZoneServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTrustZoneServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).RegisterTrustZoneServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_RegisterTrustZoneServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).RegisterTrustZoneServer(ctx, req.(*RegisterTrustZoneServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustZoneService_UpdateTrustZoneBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustZoneBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustZoneServiceServer).UpdateTrustZoneBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrustZoneService_UpdateTrustZoneBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustZoneServiceServer).UpdateTrustZoneBundle(ctx, req.(*UpdateTrustZoneBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrustZoneService_ServiceDesc is the grpc.ServiceDesc for TrustZoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustZoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.connect.trust_zone_service.v1alpha1.TrustZoneService",
	HandlerType: (*TrustZoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrustZone",
			Handler:    _TrustZoneService_CreateTrustZone_Handler,
		},
		{
			MethodName: "DestroyTrustZone",
			Handler:    _TrustZoneService_DestroyTrustZone_Handler,
		},
		{
			MethodName: "GetTrustZone",
			Handler:    _TrustZoneService_GetTrustZone_Handler,
		},
		{
			MethodName: "ListTrustZones",
			Handler:    _TrustZoneService_ListTrustZones_Handler,
		},
		{
			MethodName: "UpdateTrustZone",
			Handler:    _TrustZoneService_UpdateTrustZone_Handler,
		},
		{
			MethodName: "RegisterAgent",
			Handler:    _TrustZoneService_RegisterAgent_Handler,
		},
		{
			MethodName: "RegisterTrustZoneServer",
			Handler:    _TrustZoneService_RegisterTrustZoneServer_Handler,
		},
		{
			MethodName: "UpdateTrustZoneBundle",
			Handler:    _TrustZoneService_UpdateTrustZoneBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connect/trust_zone_service/v1alpha1/trust_zone_service.proto",
}
