// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/connect/workload_service/v1alpha1/workload_service.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkloadObservationService_PublishWorkloadEvents_FullMethodName = "/proto.connect.workload_service.v1alpha1.WorkloadObservationService/PublishWorkloadEvents"
)

// WorkloadObservationServiceClient is the client API for WorkloadObservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadObservationServiceClient interface {
	PublishWorkloadEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse], error)
}

type workloadObservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadObservationServiceClient(cc grpc.ClientConnInterface) WorkloadObservationServiceClient {
	return &workloadObservationServiceClient{cc}
}

func (c *workloadObservationServiceClient) PublishWorkloadEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WorkloadObservationService_ServiceDesc.Streams[0], WorkloadObservationService_PublishWorkloadEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkloadObservationService_PublishWorkloadEventsClient = grpc.ClientStreamingClient[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse]

// WorkloadObservationServiceServer is the server API for WorkloadObservationService service.
// All implementations should embed UnimplementedWorkloadObservationServiceServer
// for forward compatibility.
type WorkloadObservationServiceServer interface {
	PublishWorkloadEvents(grpc.ClientStreamingServer[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse]) error
}

// UnimplementedWorkloadObservationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkloadObservationServiceServer struct{}

func (UnimplementedWorkloadObservationServiceServer) PublishWorkloadEvents(grpc.ClientStreamingServer[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PublishWorkloadEvents not implemented")
}
func (UnimplementedWorkloadObservationServiceServer) testEmbeddedByValue() {}

// UnsafeWorkloadObservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadObservationServiceServer will
// result in compilation errors.
type UnsafeWorkloadObservationServiceServer interface {
	mustEmbedUnimplementedWorkloadObservationServiceServer()
}

func RegisterWorkloadObservationServiceServer(s grpc.ServiceRegistrar, srv WorkloadObservationServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkloadObservationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkloadObservationService_ServiceDesc, srv)
}

func _WorkloadObservationService_PublishWorkloadEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkloadObservationServiceServer).PublishWorkloadEvents(&grpc.GenericServerStream[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WorkloadObservationService_PublishWorkloadEventsServer = grpc.ClientStreamingServer[PublishWorkloadEventsRequest, PublishWorkloadEventsResponse]

// WorkloadObservationService_ServiceDesc is the grpc.ServiceDesc for WorkloadObservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadObservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.connect.workload_service.v1alpha1.WorkloadObservationService",
	HandlerType: (*WorkloadObservationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishWorkloadEvents",
			Handler:       _WorkloadObservationService_PublishWorkloadEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/connect/workload_service/v1alpha1/workload_service.proto",
}
