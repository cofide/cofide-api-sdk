// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/workload_service/v1alpha1/workload_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/workload_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkloadObservationServiceName is the fully-qualified name of the WorkloadObservationService
	// service.
	WorkloadObservationServiceName = "proto.connect.workload_service.v1alpha1.WorkloadObservationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkloadObservationServicePublishWorkloadEventsProcedure is the fully-qualified name of the
	// WorkloadObservationService's PublishWorkloadEvents RPC.
	WorkloadObservationServicePublishWorkloadEventsProcedure = "/proto.connect.workload_service.v1alpha1.WorkloadObservationService/PublishWorkloadEvents"
	// WorkloadObservationServiceListWorkloadsProcedure is the fully-qualified name of the
	// WorkloadObservationService's ListWorkloads RPC.
	WorkloadObservationServiceListWorkloadsProcedure = "/proto.connect.workload_service.v1alpha1.WorkloadObservationService/ListWorkloads"
)

// WorkloadObservationServiceClient is a client for the
// proto.connect.workload_service.v1alpha1.WorkloadObservationService service.
type WorkloadObservationServiceClient interface {
	PublishWorkloadEvents(context.Context) *connect.ClientStreamForClient[v1alpha1.PublishWorkloadEventsRequest, v1alpha1.PublishWorkloadEventsResponse]
	ListWorkloads(context.Context, *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error)
}

// NewWorkloadObservationServiceClient constructs a client for the
// proto.connect.workload_service.v1alpha1.WorkloadObservationService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkloadObservationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkloadObservationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workloadObservationServiceMethods := v1alpha1.File_proto_connect_workload_service_v1alpha1_workload_service_proto.Services().ByName("WorkloadObservationService").Methods()
	return &workloadObservationServiceClient{
		publishWorkloadEvents: connect.NewClient[v1alpha1.PublishWorkloadEventsRequest, v1alpha1.PublishWorkloadEventsResponse](
			httpClient,
			baseURL+WorkloadObservationServicePublishWorkloadEventsProcedure,
			connect.WithSchema(workloadObservationServiceMethods.ByName("PublishWorkloadEvents")),
			connect.WithClientOptions(opts...),
		),
		listWorkloads: connect.NewClient[v1alpha1.ListWorkloadsRequest, v1alpha1.ListWorkloadsResponse](
			httpClient,
			baseURL+WorkloadObservationServiceListWorkloadsProcedure,
			connect.WithSchema(workloadObservationServiceMethods.ByName("ListWorkloads")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workloadObservationServiceClient implements WorkloadObservationServiceClient.
type workloadObservationServiceClient struct {
	publishWorkloadEvents *connect.Client[v1alpha1.PublishWorkloadEventsRequest, v1alpha1.PublishWorkloadEventsResponse]
	listWorkloads         *connect.Client[v1alpha1.ListWorkloadsRequest, v1alpha1.ListWorkloadsResponse]
}

// PublishWorkloadEvents calls
// proto.connect.workload_service.v1alpha1.WorkloadObservationService.PublishWorkloadEvents.
func (c *workloadObservationServiceClient) PublishWorkloadEvents(ctx context.Context) *connect.ClientStreamForClient[v1alpha1.PublishWorkloadEventsRequest, v1alpha1.PublishWorkloadEventsResponse] {
	return c.publishWorkloadEvents.CallClientStream(ctx)
}

// ListWorkloads calls
// proto.connect.workload_service.v1alpha1.WorkloadObservationService.ListWorkloads.
func (c *workloadObservationServiceClient) ListWorkloads(ctx context.Context, req *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error) {
	return c.listWorkloads.CallUnary(ctx, req)
}

// WorkloadObservationServiceHandler is an implementation of the
// proto.connect.workload_service.v1alpha1.WorkloadObservationService service.
type WorkloadObservationServiceHandler interface {
	PublishWorkloadEvents(context.Context, *connect.ClientStream[v1alpha1.PublishWorkloadEventsRequest]) (*connect.Response[v1alpha1.PublishWorkloadEventsResponse], error)
	ListWorkloads(context.Context, *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error)
}

// NewWorkloadObservationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkloadObservationServiceHandler(svc WorkloadObservationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workloadObservationServiceMethods := v1alpha1.File_proto_connect_workload_service_v1alpha1_workload_service_proto.Services().ByName("WorkloadObservationService").Methods()
	workloadObservationServicePublishWorkloadEventsHandler := connect.NewClientStreamHandler(
		WorkloadObservationServicePublishWorkloadEventsProcedure,
		svc.PublishWorkloadEvents,
		connect.WithSchema(workloadObservationServiceMethods.ByName("PublishWorkloadEvents")),
		connect.WithHandlerOptions(opts...),
	)
	workloadObservationServiceListWorkloadsHandler := connect.NewUnaryHandler(
		WorkloadObservationServiceListWorkloadsProcedure,
		svc.ListWorkloads,
		connect.WithSchema(workloadObservationServiceMethods.ByName("ListWorkloads")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.workload_service.v1alpha1.WorkloadObservationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkloadObservationServicePublishWorkloadEventsProcedure:
			workloadObservationServicePublishWorkloadEventsHandler.ServeHTTP(w, r)
		case WorkloadObservationServiceListWorkloadsProcedure:
			workloadObservationServiceListWorkloadsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkloadObservationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkloadObservationServiceHandler struct{}

func (UnimplementedWorkloadObservationServiceHandler) PublishWorkloadEvents(context.Context, *connect.ClientStream[v1alpha1.PublishWorkloadEventsRequest]) (*connect.Response[v1alpha1.PublishWorkloadEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.workload_service.v1alpha1.WorkloadObservationService.PublishWorkloadEvents is not implemented"))
}

func (UnimplementedWorkloadObservationServiceHandler) ListWorkloads(context.Context, *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.workload_service.v1alpha1.WorkloadObservationService.ListWorkloads is not implemented"))
}
