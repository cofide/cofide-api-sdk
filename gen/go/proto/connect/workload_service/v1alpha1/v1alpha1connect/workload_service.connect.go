// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/workload_service/v1alpha1/workload_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/workload_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkloadServiceName is the fully-qualified name of the WorkloadService service.
	WorkloadServiceName = "proto.connect.workload_service.v1alpha1.WorkloadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkloadServiceCreateWorkloadProcedure is the fully-qualified name of the WorkloadService's
	// CreateWorkload RPC.
	WorkloadServiceCreateWorkloadProcedure = "/proto.connect.workload_service.v1alpha1.WorkloadService/CreateWorkload"
	// WorkloadServiceDestroyWorkloadProcedure is the fully-qualified name of the WorkloadService's
	// DestroyWorkload RPC.
	WorkloadServiceDestroyWorkloadProcedure = "/proto.connect.workload_service.v1alpha1.WorkloadService/DestroyWorkload"
	// WorkloadServiceGetWorkloadProcedure is the fully-qualified name of the WorkloadService's
	// GetWorkload RPC.
	WorkloadServiceGetWorkloadProcedure = "/proto.connect.workload_service.v1alpha1.WorkloadService/GetWorkload"
	// WorkloadServiceListWorkloadsProcedure is the fully-qualified name of the WorkloadService's
	// ListWorkloads RPC.
	WorkloadServiceListWorkloadsProcedure = "/proto.connect.workload_service.v1alpha1.WorkloadService/ListWorkloads"
	// WorkloadServiceUpdateWorkloadProcedure is the fully-qualified name of the WorkloadService's
	// UpdateWorkload RPC.
	WorkloadServiceUpdateWorkloadProcedure = "/proto.connect.workload_service.v1alpha1.WorkloadService/UpdateWorkload"
)

// WorkloadServiceClient is a client for the proto.connect.workload_service.v1alpha1.WorkloadService
// service.
type WorkloadServiceClient interface {
	CreateWorkload(context.Context, *connect.Request[v1alpha1.CreateWorkloadRequest]) (*connect.Response[v1alpha1.CreateWorkloadResponse], error)
	DestroyWorkload(context.Context, *connect.Request[v1alpha1.DestroyWorkloadRequest]) (*connect.Response[v1alpha1.DestroyWorkloadResponse], error)
	GetWorkload(context.Context, *connect.Request[v1alpha1.GetWorkloadRequest]) (*connect.Response[v1alpha1.GetWorkloadResponse], error)
	ListWorkloads(context.Context, *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error)
	UpdateWorkload(context.Context, *connect.Request[v1alpha1.UpdateWorkloadRequest]) (*connect.Response[v1alpha1.UpdateWorkloadResponse], error)
}

// NewWorkloadServiceClient constructs a client for the
// proto.connect.workload_service.v1alpha1.WorkloadService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkloadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkloadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workloadServiceMethods := v1alpha1.File_proto_connect_workload_service_v1alpha1_workload_service_proto.Services().ByName("WorkloadService").Methods()
	return &workloadServiceClient{
		createWorkload: connect.NewClient[v1alpha1.CreateWorkloadRequest, v1alpha1.CreateWorkloadResponse](
			httpClient,
			baseURL+WorkloadServiceCreateWorkloadProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("CreateWorkload")),
			connect.WithClientOptions(opts...),
		),
		destroyWorkload: connect.NewClient[v1alpha1.DestroyWorkloadRequest, v1alpha1.DestroyWorkloadResponse](
			httpClient,
			baseURL+WorkloadServiceDestroyWorkloadProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("DestroyWorkload")),
			connect.WithClientOptions(opts...),
		),
		getWorkload: connect.NewClient[v1alpha1.GetWorkloadRequest, v1alpha1.GetWorkloadResponse](
			httpClient,
			baseURL+WorkloadServiceGetWorkloadProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("GetWorkload")),
			connect.WithClientOptions(opts...),
		),
		listWorkloads: connect.NewClient[v1alpha1.ListWorkloadsRequest, v1alpha1.ListWorkloadsResponse](
			httpClient,
			baseURL+WorkloadServiceListWorkloadsProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("ListWorkloads")),
			connect.WithClientOptions(opts...),
		),
		updateWorkload: connect.NewClient[v1alpha1.UpdateWorkloadRequest, v1alpha1.UpdateWorkloadResponse](
			httpClient,
			baseURL+WorkloadServiceUpdateWorkloadProcedure,
			connect.WithSchema(workloadServiceMethods.ByName("UpdateWorkload")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workloadServiceClient implements WorkloadServiceClient.
type workloadServiceClient struct {
	createWorkload  *connect.Client[v1alpha1.CreateWorkloadRequest, v1alpha1.CreateWorkloadResponse]
	destroyWorkload *connect.Client[v1alpha1.DestroyWorkloadRequest, v1alpha1.DestroyWorkloadResponse]
	getWorkload     *connect.Client[v1alpha1.GetWorkloadRequest, v1alpha1.GetWorkloadResponse]
	listWorkloads   *connect.Client[v1alpha1.ListWorkloadsRequest, v1alpha1.ListWorkloadsResponse]
	updateWorkload  *connect.Client[v1alpha1.UpdateWorkloadRequest, v1alpha1.UpdateWorkloadResponse]
}

// CreateWorkload calls proto.connect.workload_service.v1alpha1.WorkloadService.CreateWorkload.
func (c *workloadServiceClient) CreateWorkload(ctx context.Context, req *connect.Request[v1alpha1.CreateWorkloadRequest]) (*connect.Response[v1alpha1.CreateWorkloadResponse], error) {
	return c.createWorkload.CallUnary(ctx, req)
}

// DestroyWorkload calls proto.connect.workload_service.v1alpha1.WorkloadService.DestroyWorkload.
func (c *workloadServiceClient) DestroyWorkload(ctx context.Context, req *connect.Request[v1alpha1.DestroyWorkloadRequest]) (*connect.Response[v1alpha1.DestroyWorkloadResponse], error) {
	return c.destroyWorkload.CallUnary(ctx, req)
}

// GetWorkload calls proto.connect.workload_service.v1alpha1.WorkloadService.GetWorkload.
func (c *workloadServiceClient) GetWorkload(ctx context.Context, req *connect.Request[v1alpha1.GetWorkloadRequest]) (*connect.Response[v1alpha1.GetWorkloadResponse], error) {
	return c.getWorkload.CallUnary(ctx, req)
}

// ListWorkloads calls proto.connect.workload_service.v1alpha1.WorkloadService.ListWorkloads.
func (c *workloadServiceClient) ListWorkloads(ctx context.Context, req *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error) {
	return c.listWorkloads.CallUnary(ctx, req)
}

// UpdateWorkload calls proto.connect.workload_service.v1alpha1.WorkloadService.UpdateWorkload.
func (c *workloadServiceClient) UpdateWorkload(ctx context.Context, req *connect.Request[v1alpha1.UpdateWorkloadRequest]) (*connect.Response[v1alpha1.UpdateWorkloadResponse], error) {
	return c.updateWorkload.CallUnary(ctx, req)
}

// WorkloadServiceHandler is an implementation of the
// proto.connect.workload_service.v1alpha1.WorkloadService service.
type WorkloadServiceHandler interface {
	CreateWorkload(context.Context, *connect.Request[v1alpha1.CreateWorkloadRequest]) (*connect.Response[v1alpha1.CreateWorkloadResponse], error)
	DestroyWorkload(context.Context, *connect.Request[v1alpha1.DestroyWorkloadRequest]) (*connect.Response[v1alpha1.DestroyWorkloadResponse], error)
	GetWorkload(context.Context, *connect.Request[v1alpha1.GetWorkloadRequest]) (*connect.Response[v1alpha1.GetWorkloadResponse], error)
	ListWorkloads(context.Context, *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error)
	UpdateWorkload(context.Context, *connect.Request[v1alpha1.UpdateWorkloadRequest]) (*connect.Response[v1alpha1.UpdateWorkloadResponse], error)
}

// NewWorkloadServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkloadServiceHandler(svc WorkloadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workloadServiceMethods := v1alpha1.File_proto_connect_workload_service_v1alpha1_workload_service_proto.Services().ByName("WorkloadService").Methods()
	workloadServiceCreateWorkloadHandler := connect.NewUnaryHandler(
		WorkloadServiceCreateWorkloadProcedure,
		svc.CreateWorkload,
		connect.WithSchema(workloadServiceMethods.ByName("CreateWorkload")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceDestroyWorkloadHandler := connect.NewUnaryHandler(
		WorkloadServiceDestroyWorkloadProcedure,
		svc.DestroyWorkload,
		connect.WithSchema(workloadServiceMethods.ByName("DestroyWorkload")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceGetWorkloadHandler := connect.NewUnaryHandler(
		WorkloadServiceGetWorkloadProcedure,
		svc.GetWorkload,
		connect.WithSchema(workloadServiceMethods.ByName("GetWorkload")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceListWorkloadsHandler := connect.NewUnaryHandler(
		WorkloadServiceListWorkloadsProcedure,
		svc.ListWorkloads,
		connect.WithSchema(workloadServiceMethods.ByName("ListWorkloads")),
		connect.WithHandlerOptions(opts...),
	)
	workloadServiceUpdateWorkloadHandler := connect.NewUnaryHandler(
		WorkloadServiceUpdateWorkloadProcedure,
		svc.UpdateWorkload,
		connect.WithSchema(workloadServiceMethods.ByName("UpdateWorkload")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.workload_service.v1alpha1.WorkloadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkloadServiceCreateWorkloadProcedure:
			workloadServiceCreateWorkloadHandler.ServeHTTP(w, r)
		case WorkloadServiceDestroyWorkloadProcedure:
			workloadServiceDestroyWorkloadHandler.ServeHTTP(w, r)
		case WorkloadServiceGetWorkloadProcedure:
			workloadServiceGetWorkloadHandler.ServeHTTP(w, r)
		case WorkloadServiceListWorkloadsProcedure:
			workloadServiceListWorkloadsHandler.ServeHTTP(w, r)
		case WorkloadServiceUpdateWorkloadProcedure:
			workloadServiceUpdateWorkloadHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkloadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkloadServiceHandler struct{}

func (UnimplementedWorkloadServiceHandler) CreateWorkload(context.Context, *connect.Request[v1alpha1.CreateWorkloadRequest]) (*connect.Response[v1alpha1.CreateWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.workload_service.v1alpha1.WorkloadService.CreateWorkload is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) DestroyWorkload(context.Context, *connect.Request[v1alpha1.DestroyWorkloadRequest]) (*connect.Response[v1alpha1.DestroyWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.workload_service.v1alpha1.WorkloadService.DestroyWorkload is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) GetWorkload(context.Context, *connect.Request[v1alpha1.GetWorkloadRequest]) (*connect.Response[v1alpha1.GetWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.workload_service.v1alpha1.WorkloadService.GetWorkload is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) ListWorkloads(context.Context, *connect.Request[v1alpha1.ListWorkloadsRequest]) (*connect.Response[v1alpha1.ListWorkloadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.workload_service.v1alpha1.WorkloadService.ListWorkloads is not implemented"))
}

func (UnimplementedWorkloadServiceHandler) UpdateWorkload(context.Context, *connect.Request[v1alpha1.UpdateWorkloadRequest]) (*connect.Response[v1alpha1.UpdateWorkloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.workload_service.v1alpha1.WorkloadService.UpdateWorkload is not implemented"))
}
