// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/attestation_policy_service/v1alpha1/attestation_policy_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/attestation_policy_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AttestationPolicyServiceName is the fully-qualified name of the AttestationPolicyService service.
	AttestationPolicyServiceName = "proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AttestationPolicyServiceCreateAttestationPolicyProcedure is the fully-qualified name of the
	// AttestationPolicyService's CreateAttestationPolicy RPC.
	AttestationPolicyServiceCreateAttestationPolicyProcedure = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/CreateAttestationPolicy"
	// AttestationPolicyServiceDestroyAttestationPolicyProcedure is the fully-qualified name of the
	// AttestationPolicyService's DestroyAttestationPolicy RPC.
	AttestationPolicyServiceDestroyAttestationPolicyProcedure = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/DestroyAttestationPolicy"
	// AttestationPolicyServiceGetAttestationPolicyProcedure is the fully-qualified name of the
	// AttestationPolicyService's GetAttestationPolicy RPC.
	AttestationPolicyServiceGetAttestationPolicyProcedure = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/GetAttestationPolicy"
	// AttestationPolicyServiceListAttestationPoliciesProcedure is the fully-qualified name of the
	// AttestationPolicyService's ListAttestationPolicies RPC.
	AttestationPolicyServiceListAttestationPoliciesProcedure = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/ListAttestationPolicies"
	// AttestationPolicyServiceUpdateAttestationPolicyProcedure is the fully-qualified name of the
	// AttestationPolicyService's UpdateAttestationPolicy RPC.
	AttestationPolicyServiceUpdateAttestationPolicyProcedure = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/UpdateAttestationPolicy"
)

// AttestationPolicyServiceClient is a client for the
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService service.
type AttestationPolicyServiceClient interface {
	CreateAttestationPolicy(context.Context, *connect.Request[v1alpha1.CreateAttestationPolicyRequest]) (*connect.Response[v1alpha1.CreateAttestationPolicyResponse], error)
	DestroyAttestationPolicy(context.Context, *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error)
	GetAttestationPolicy(context.Context, *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error)
	ListAttestationPolicies(context.Context, *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error)
	UpdateAttestationPolicy(context.Context, *connect.Request[v1alpha1.UpdateAttestationPolicyRequest]) (*connect.Response[v1alpha1.UpdateAttestationPolicyResponse], error)
}

// NewAttestationPolicyServiceClient constructs a client for the
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAttestationPolicyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AttestationPolicyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	attestationPolicyServiceMethods := v1alpha1.File_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto.Services().ByName("AttestationPolicyService").Methods()
	return &attestationPolicyServiceClient{
		createAttestationPolicy: connect.NewClient[v1alpha1.CreateAttestationPolicyRequest, v1alpha1.CreateAttestationPolicyResponse](
			httpClient,
			baseURL+AttestationPolicyServiceCreateAttestationPolicyProcedure,
			connect.WithSchema(attestationPolicyServiceMethods.ByName("CreateAttestationPolicy")),
			connect.WithClientOptions(opts...),
		),
		destroyAttestationPolicy: connect.NewClient[v1alpha1.DestroyAttestationPolicyRequest, v1alpha1.DestroyAttestationPolicyResponse](
			httpClient,
			baseURL+AttestationPolicyServiceDestroyAttestationPolicyProcedure,
			connect.WithSchema(attestationPolicyServiceMethods.ByName("DestroyAttestationPolicy")),
			connect.WithClientOptions(opts...),
		),
		getAttestationPolicy: connect.NewClient[v1alpha1.GetAttestationPolicyRequest, v1alpha1.GetAttestationPolicyResponse](
			httpClient,
			baseURL+AttestationPolicyServiceGetAttestationPolicyProcedure,
			connect.WithSchema(attestationPolicyServiceMethods.ByName("GetAttestationPolicy")),
			connect.WithClientOptions(opts...),
		),
		listAttestationPolicies: connect.NewClient[v1alpha1.ListAttestationPoliciesRequest, v1alpha1.ListAttestationPoliciesResponse](
			httpClient,
			baseURL+AttestationPolicyServiceListAttestationPoliciesProcedure,
			connect.WithSchema(attestationPolicyServiceMethods.ByName("ListAttestationPolicies")),
			connect.WithClientOptions(opts...),
		),
		updateAttestationPolicy: connect.NewClient[v1alpha1.UpdateAttestationPolicyRequest, v1alpha1.UpdateAttestationPolicyResponse](
			httpClient,
			baseURL+AttestationPolicyServiceUpdateAttestationPolicyProcedure,
			connect.WithSchema(attestationPolicyServiceMethods.ByName("UpdateAttestationPolicy")),
			connect.WithClientOptions(opts...),
		),
	}
}

// attestationPolicyServiceClient implements AttestationPolicyServiceClient.
type attestationPolicyServiceClient struct {
	createAttestationPolicy  *connect.Client[v1alpha1.CreateAttestationPolicyRequest, v1alpha1.CreateAttestationPolicyResponse]
	destroyAttestationPolicy *connect.Client[v1alpha1.DestroyAttestationPolicyRequest, v1alpha1.DestroyAttestationPolicyResponse]
	getAttestationPolicy     *connect.Client[v1alpha1.GetAttestationPolicyRequest, v1alpha1.GetAttestationPolicyResponse]
	listAttestationPolicies  *connect.Client[v1alpha1.ListAttestationPoliciesRequest, v1alpha1.ListAttestationPoliciesResponse]
	updateAttestationPolicy  *connect.Client[v1alpha1.UpdateAttestationPolicyRequest, v1alpha1.UpdateAttestationPolicyResponse]
}

// CreateAttestationPolicy calls
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.CreateAttestationPolicy.
func (c *attestationPolicyServiceClient) CreateAttestationPolicy(ctx context.Context, req *connect.Request[v1alpha1.CreateAttestationPolicyRequest]) (*connect.Response[v1alpha1.CreateAttestationPolicyResponse], error) {
	return c.createAttestationPolicy.CallUnary(ctx, req)
}

// DestroyAttestationPolicy calls
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.DestroyAttestationPolicy.
func (c *attestationPolicyServiceClient) DestroyAttestationPolicy(ctx context.Context, req *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error) {
	return c.destroyAttestationPolicy.CallUnary(ctx, req)
}

// GetAttestationPolicy calls
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.GetAttestationPolicy.
func (c *attestationPolicyServiceClient) GetAttestationPolicy(ctx context.Context, req *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error) {
	return c.getAttestationPolicy.CallUnary(ctx, req)
}

// ListAttestationPolicies calls
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.ListAttestationPolicies.
func (c *attestationPolicyServiceClient) ListAttestationPolicies(ctx context.Context, req *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error) {
	return c.listAttestationPolicies.CallUnary(ctx, req)
}

// UpdateAttestationPolicy calls
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.UpdateAttestationPolicy.
func (c *attestationPolicyServiceClient) UpdateAttestationPolicy(ctx context.Context, req *connect.Request[v1alpha1.UpdateAttestationPolicyRequest]) (*connect.Response[v1alpha1.UpdateAttestationPolicyResponse], error) {
	return c.updateAttestationPolicy.CallUnary(ctx, req)
}

// AttestationPolicyServiceHandler is an implementation of the
// proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService service.
type AttestationPolicyServiceHandler interface {
	CreateAttestationPolicy(context.Context, *connect.Request[v1alpha1.CreateAttestationPolicyRequest]) (*connect.Response[v1alpha1.CreateAttestationPolicyResponse], error)
	DestroyAttestationPolicy(context.Context, *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error)
	GetAttestationPolicy(context.Context, *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error)
	ListAttestationPolicies(context.Context, *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error)
	UpdateAttestationPolicy(context.Context, *connect.Request[v1alpha1.UpdateAttestationPolicyRequest]) (*connect.Response[v1alpha1.UpdateAttestationPolicyResponse], error)
}

// NewAttestationPolicyServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAttestationPolicyServiceHandler(svc AttestationPolicyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	attestationPolicyServiceMethods := v1alpha1.File_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto.Services().ByName("AttestationPolicyService").Methods()
	attestationPolicyServiceCreateAttestationPolicyHandler := connect.NewUnaryHandler(
		AttestationPolicyServiceCreateAttestationPolicyProcedure,
		svc.CreateAttestationPolicy,
		connect.WithSchema(attestationPolicyServiceMethods.ByName("CreateAttestationPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	attestationPolicyServiceDestroyAttestationPolicyHandler := connect.NewUnaryHandler(
		AttestationPolicyServiceDestroyAttestationPolicyProcedure,
		svc.DestroyAttestationPolicy,
		connect.WithSchema(attestationPolicyServiceMethods.ByName("DestroyAttestationPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	attestationPolicyServiceGetAttestationPolicyHandler := connect.NewUnaryHandler(
		AttestationPolicyServiceGetAttestationPolicyProcedure,
		svc.GetAttestationPolicy,
		connect.WithSchema(attestationPolicyServiceMethods.ByName("GetAttestationPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	attestationPolicyServiceListAttestationPoliciesHandler := connect.NewUnaryHandler(
		AttestationPolicyServiceListAttestationPoliciesProcedure,
		svc.ListAttestationPolicies,
		connect.WithSchema(attestationPolicyServiceMethods.ByName("ListAttestationPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	attestationPolicyServiceUpdateAttestationPolicyHandler := connect.NewUnaryHandler(
		AttestationPolicyServiceUpdateAttestationPolicyProcedure,
		svc.UpdateAttestationPolicy,
		connect.WithSchema(attestationPolicyServiceMethods.ByName("UpdateAttestationPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AttestationPolicyServiceCreateAttestationPolicyProcedure:
			attestationPolicyServiceCreateAttestationPolicyHandler.ServeHTTP(w, r)
		case AttestationPolicyServiceDestroyAttestationPolicyProcedure:
			attestationPolicyServiceDestroyAttestationPolicyHandler.ServeHTTP(w, r)
		case AttestationPolicyServiceGetAttestationPolicyProcedure:
			attestationPolicyServiceGetAttestationPolicyHandler.ServeHTTP(w, r)
		case AttestationPolicyServiceListAttestationPoliciesProcedure:
			attestationPolicyServiceListAttestationPoliciesHandler.ServeHTTP(w, r)
		case AttestationPolicyServiceUpdateAttestationPolicyProcedure:
			attestationPolicyServiceUpdateAttestationPolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAttestationPolicyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAttestationPolicyServiceHandler struct{}

func (UnimplementedAttestationPolicyServiceHandler) CreateAttestationPolicy(context.Context, *connect.Request[v1alpha1.CreateAttestationPolicyRequest]) (*connect.Response[v1alpha1.CreateAttestationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.CreateAttestationPolicy is not implemented"))
}

func (UnimplementedAttestationPolicyServiceHandler) DestroyAttestationPolicy(context.Context, *connect.Request[v1alpha1.DestroyAttestationPolicyRequest]) (*connect.Response[v1alpha1.DestroyAttestationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.DestroyAttestationPolicy is not implemented"))
}

func (UnimplementedAttestationPolicyServiceHandler) GetAttestationPolicy(context.Context, *connect.Request[v1alpha1.GetAttestationPolicyRequest]) (*connect.Response[v1alpha1.GetAttestationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.GetAttestationPolicy is not implemented"))
}

func (UnimplementedAttestationPolicyServiceHandler) ListAttestationPolicies(context.Context, *connect.Request[v1alpha1.ListAttestationPoliciesRequest]) (*connect.Response[v1alpha1.ListAttestationPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.ListAttestationPolicies is not implemented"))
}

func (UnimplementedAttestationPolicyServiceHandler) UpdateAttestationPolicy(context.Context, *connect.Request[v1alpha1.UpdateAttestationPolicyRequest]) (*connect.Response[v1alpha1.UpdateAttestationPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.UpdateAttestationPolicy is not implemented"))
}
