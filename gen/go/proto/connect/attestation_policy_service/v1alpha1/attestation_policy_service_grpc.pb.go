// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/connect/attestation_policy_service/v1alpha1/attestation_policy_service.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttestationPolicyService_CreateAttestationPolicy_FullMethodName  = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/CreateAttestationPolicy"
	AttestationPolicyService_DestroyAttestationPolicy_FullMethodName = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/DestroyAttestationPolicy"
	AttestationPolicyService_GetAttestationPolicy_FullMethodName     = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/GetAttestationPolicy"
	AttestationPolicyService_ListAttestationPolicies_FullMethodName  = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/ListAttestationPolicies"
	AttestationPolicyService_UpdateAttestationPolicy_FullMethodName  = "/proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService/UpdateAttestationPolicy"
)

// AttestationPolicyServiceClient is the client API for AttestationPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestationPolicyServiceClient interface {
	CreateAttestationPolicy(ctx context.Context, in *CreateAttestationPolicyRequest, opts ...grpc.CallOption) (*CreateAttestationPolicyResponse, error)
	DestroyAttestationPolicy(ctx context.Context, in *DestroyAttestationPolicyRequest, opts ...grpc.CallOption) (*DestroyAttestationPolicyResponse, error)
	GetAttestationPolicy(ctx context.Context, in *GetAttestationPolicyRequest, opts ...grpc.CallOption) (*GetAttestationPolicyResponse, error)
	ListAttestationPolicies(ctx context.Context, in *ListAttestationPoliciesRequest, opts ...grpc.CallOption) (*ListAttestationPoliciesResponse, error)
	UpdateAttestationPolicy(ctx context.Context, in *UpdateAttestationPolicyRequest, opts ...grpc.CallOption) (*UpdateAttestationPolicyResponse, error)
}

type attestationPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationPolicyServiceClient(cc grpc.ClientConnInterface) AttestationPolicyServiceClient {
	return &attestationPolicyServiceClient{cc}
}

func (c *attestationPolicyServiceClient) CreateAttestationPolicy(ctx context.Context, in *CreateAttestationPolicyRequest, opts ...grpc.CallOption) (*CreateAttestationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAttestationPolicyResponse)
	err := c.cc.Invoke(ctx, AttestationPolicyService_CreateAttestationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationPolicyServiceClient) DestroyAttestationPolicy(ctx context.Context, in *DestroyAttestationPolicyRequest, opts ...grpc.CallOption) (*DestroyAttestationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyAttestationPolicyResponse)
	err := c.cc.Invoke(ctx, AttestationPolicyService_DestroyAttestationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationPolicyServiceClient) GetAttestationPolicy(ctx context.Context, in *GetAttestationPolicyRequest, opts ...grpc.CallOption) (*GetAttestationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttestationPolicyResponse)
	err := c.cc.Invoke(ctx, AttestationPolicyService_GetAttestationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationPolicyServiceClient) ListAttestationPolicies(ctx context.Context, in *ListAttestationPoliciesRequest, opts ...grpc.CallOption) (*ListAttestationPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttestationPoliciesResponse)
	err := c.cc.Invoke(ctx, AttestationPolicyService_ListAttestationPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationPolicyServiceClient) UpdateAttestationPolicy(ctx context.Context, in *UpdateAttestationPolicyRequest, opts ...grpc.CallOption) (*UpdateAttestationPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAttestationPolicyResponse)
	err := c.cc.Invoke(ctx, AttestationPolicyService_UpdateAttestationPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationPolicyServiceServer is the server API for AttestationPolicyService service.
// All implementations should embed UnimplementedAttestationPolicyServiceServer
// for forward compatibility.
type AttestationPolicyServiceServer interface {
	CreateAttestationPolicy(context.Context, *CreateAttestationPolicyRequest) (*CreateAttestationPolicyResponse, error)
	DestroyAttestationPolicy(context.Context, *DestroyAttestationPolicyRequest) (*DestroyAttestationPolicyResponse, error)
	GetAttestationPolicy(context.Context, *GetAttestationPolicyRequest) (*GetAttestationPolicyResponse, error)
	ListAttestationPolicies(context.Context, *ListAttestationPoliciesRequest) (*ListAttestationPoliciesResponse, error)
	UpdateAttestationPolicy(context.Context, *UpdateAttestationPolicyRequest) (*UpdateAttestationPolicyResponse, error)
}

// UnimplementedAttestationPolicyServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttestationPolicyServiceServer struct{}

func (UnimplementedAttestationPolicyServiceServer) CreateAttestationPolicy(context.Context, *CreateAttestationPolicyRequest) (*CreateAttestationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttestationPolicy not implemented")
}
func (UnimplementedAttestationPolicyServiceServer) DestroyAttestationPolicy(context.Context, *DestroyAttestationPolicyRequest) (*DestroyAttestationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAttestationPolicy not implemented")
}
func (UnimplementedAttestationPolicyServiceServer) GetAttestationPolicy(context.Context, *GetAttestationPolicyRequest) (*GetAttestationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttestationPolicy not implemented")
}
func (UnimplementedAttestationPolicyServiceServer) ListAttestationPolicies(context.Context, *ListAttestationPoliciesRequest) (*ListAttestationPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttestationPolicies not implemented")
}
func (UnimplementedAttestationPolicyServiceServer) UpdateAttestationPolicy(context.Context, *UpdateAttestationPolicyRequest) (*UpdateAttestationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttestationPolicy not implemented")
}
func (UnimplementedAttestationPolicyServiceServer) testEmbeddedByValue() {}

// UnsafeAttestationPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestationPolicyServiceServer will
// result in compilation errors.
type UnsafeAttestationPolicyServiceServer interface {
	mustEmbedUnimplementedAttestationPolicyServiceServer()
}

func RegisterAttestationPolicyServiceServer(s grpc.ServiceRegistrar, srv AttestationPolicyServiceServer) {
	// If the following call pancis, it indicates UnimplementedAttestationPolicyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AttestationPolicyService_ServiceDesc, srv)
}

func _AttestationPolicyService_CreateAttestationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationPolicyServiceServer).CreateAttestationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationPolicyService_CreateAttestationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationPolicyServiceServer).CreateAttestationPolicy(ctx, req.(*CreateAttestationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationPolicyService_DestroyAttestationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyAttestationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationPolicyServiceServer).DestroyAttestationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationPolicyService_DestroyAttestationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationPolicyServiceServer).DestroyAttestationPolicy(ctx, req.(*DestroyAttestationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationPolicyService_GetAttestationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttestationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationPolicyServiceServer).GetAttestationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationPolicyService_GetAttestationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationPolicyServiceServer).GetAttestationPolicy(ctx, req.(*GetAttestationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationPolicyService_ListAttestationPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttestationPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationPolicyServiceServer).ListAttestationPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationPolicyService_ListAttestationPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationPolicyServiceServer).ListAttestationPolicies(ctx, req.(*ListAttestationPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationPolicyService_UpdateAttestationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttestationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationPolicyServiceServer).UpdateAttestationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationPolicyService_UpdateAttestationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationPolicyServiceServer).UpdateAttestationPolicy(ctx, req.(*UpdateAttestationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttestationPolicyService_ServiceDesc is the grpc.ServiceDesc for AttestationPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttestationPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService",
	HandlerType: (*AttestationPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttestationPolicy",
			Handler:    _AttestationPolicyService_CreateAttestationPolicy_Handler,
		},
		{
			MethodName: "DestroyAttestationPolicy",
			Handler:    _AttestationPolicyService_DestroyAttestationPolicy_Handler,
		},
		{
			MethodName: "GetAttestationPolicy",
			Handler:    _AttestationPolicyService_GetAttestationPolicy_Handler,
		},
		{
			MethodName: "ListAttestationPolicies",
			Handler:    _AttestationPolicyService_ListAttestationPolicies_Handler,
		},
		{
			MethodName: "UpdateAttestationPolicy",
			Handler:    _AttestationPolicyService_UpdateAttestationPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/connect/attestation_policy_service/v1alpha1/attestation_policy_service.proto",
}
