// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/connect/attestation_policy_service/v1alpha1/attestation_policy_service.proto

package v1alpha1

import (
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/attestation_policy/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAttestationPolicyRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Policy        *v1alpha1.AttestationPolicy `protobuf:"bytes,1,opt,name=policy,proto3,oneof" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAttestationPolicyRequest) Reset() {
	*x = CreateAttestationPolicyRequest{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAttestationPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestationPolicyRequest) ProtoMessage() {}

func (x *CreateAttestationPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestationPolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateAttestationPolicyRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAttestationPolicyRequest) GetPolicy() *v1alpha1.AttestationPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type CreateAttestationPolicyResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Policy        *v1alpha1.AttestationPolicy `protobuf:"bytes,1,opt,name=policy,proto3,oneof" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAttestationPolicyResponse) Reset() {
	*x = CreateAttestationPolicyResponse{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAttestationPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestationPolicyResponse) ProtoMessage() {}

func (x *CreateAttestationPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestationPolicyResponse.ProtoReflect.Descriptor instead.
func (*CreateAttestationPolicyResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAttestationPolicyResponse) GetPolicy() *v1alpha1.AttestationPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type DestroyAttestationPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      *string                `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3,oneof" json:"policy_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyAttestationPolicyRequest) Reset() {
	*x = DestroyAttestationPolicyRequest{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyAttestationPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAttestationPolicyRequest) ProtoMessage() {}

func (x *DestroyAttestationPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAttestationPolicyRequest.ProtoReflect.Descriptor instead.
func (*DestroyAttestationPolicyRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{2}
}

func (x *DestroyAttestationPolicyRequest) GetPolicyId() string {
	if x != nil && x.PolicyId != nil {
		return *x.PolicyId
	}
	return ""
}

type DestroyAttestationPolicyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyAttestationPolicyResponse) Reset() {
	*x = DestroyAttestationPolicyResponse{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyAttestationPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyAttestationPolicyResponse) ProtoMessage() {}

func (x *DestroyAttestationPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyAttestationPolicyResponse.ProtoReflect.Descriptor instead.
func (*DestroyAttestationPolicyResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{3}
}

type GetAttestationPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      *string                `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3,oneof" json:"policy_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttestationPolicyRequest) Reset() {
	*x = GetAttestationPolicyRequest{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttestationPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttestationPolicyRequest) ProtoMessage() {}

func (x *GetAttestationPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttestationPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetAttestationPolicyRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetAttestationPolicyRequest) GetPolicyId() string {
	if x != nil && x.PolicyId != nil {
		return *x.PolicyId
	}
	return ""
}

type GetAttestationPolicyResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Policy        *v1alpha1.AttestationPolicy `protobuf:"bytes,1,opt,name=policy,proto3,oneof" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAttestationPolicyResponse) Reset() {
	*x = GetAttestationPolicyResponse{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAttestationPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttestationPolicyResponse) ProtoMessage() {}

func (x *GetAttestationPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttestationPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetAttestationPolicyResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetAttestationPolicyResponse) GetPolicy() *v1alpha1.AttestationPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ListAttestationPoliciesRequest struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Filter        *ListAttestationPoliciesRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttestationPoliciesRequest) Reset() {
	*x = ListAttestationPoliciesRequest{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttestationPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestationPoliciesRequest) ProtoMessage() {}

func (x *ListAttestationPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestationPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListAttestationPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListAttestationPoliciesRequest) GetFilter() *ListAttestationPoliciesRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListAttestationPoliciesResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Policies      []*v1alpha1.AttestationPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttestationPoliciesResponse) Reset() {
	*x = ListAttestationPoliciesResponse{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttestationPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestationPoliciesResponse) ProtoMessage() {}

func (x *ListAttestationPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestationPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListAttestationPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListAttestationPoliciesResponse) GetPolicies() []*v1alpha1.AttestationPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UpdateAttestationPolicyRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Policy        *v1alpha1.AttestationPolicy `protobuf:"bytes,1,opt,name=policy,proto3,oneof" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAttestationPolicyRequest) Reset() {
	*x = UpdateAttestationPolicyRequest{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAttestationPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestationPolicyRequest) ProtoMessage() {}

func (x *UpdateAttestationPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestationPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateAttestationPolicyRequest) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAttestationPolicyRequest) GetPolicy() *v1alpha1.AttestationPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdateAttestationPolicyResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Policy        *v1alpha1.AttestationPolicy `protobuf:"bytes,1,opt,name=policy,proto3,oneof" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAttestationPolicyResponse) Reset() {
	*x = UpdateAttestationPolicyResponse{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAttestationPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestationPolicyResponse) ProtoMessage() {}

func (x *UpdateAttestationPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestationPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdateAttestationPolicyResponse) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAttestationPolicyResponse) GetPolicy() *v1alpha1.AttestationPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ListAttestationPoliciesRequest_Filter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	OrgId         *string                `protobuf:"bytes,2,opt,name=org_id,json=orgId,proto3,oneof" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAttestationPoliciesRequest_Filter) Reset() {
	*x = ListAttestationPoliciesRequest_Filter{}
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAttestationPoliciesRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestationPoliciesRequest_Filter) ProtoMessage() {}

func (x *ListAttestationPoliciesRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestationPoliciesRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListAttestationPoliciesRequest_Filter) Descriptor() ([]byte, []int) {
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListAttestationPoliciesRequest_Filter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListAttestationPoliciesRequest_Filter) GetOrgId() string {
	if x != nil && x.OrgId != nil {
		return *x.OrgId
	}
	return ""
}

var File_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto protoreflect.FileDescriptor

var file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDesc = string([]byte{
	0x0a, 0x52, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x7f, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x51, 0x0a, 0x1f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xf5, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x1a, 0x51, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x73, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x7f, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0xe3, 0x07, 0x0a, 0x18, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x51, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb7, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5b, 0x5a, 0x59,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x66, 0x69, 0x64,
	0x65, 0x2f, 0x63, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescOnce sync.Once
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescData []byte
)

func file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescGZIP() []byte {
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescOnce.Do(func() {
		file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDesc), len(file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDesc)))
	})
	return file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDescData
}

var file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_goTypes = []any{
	(*CreateAttestationPolicyRequest)(nil),        // 0: proto.connect.attestation_policy_service.v1alpha1.CreateAttestationPolicyRequest
	(*CreateAttestationPolicyResponse)(nil),       // 1: proto.connect.attestation_policy_service.v1alpha1.CreateAttestationPolicyResponse
	(*DestroyAttestationPolicyRequest)(nil),       // 2: proto.connect.attestation_policy_service.v1alpha1.DestroyAttestationPolicyRequest
	(*DestroyAttestationPolicyResponse)(nil),      // 3: proto.connect.attestation_policy_service.v1alpha1.DestroyAttestationPolicyResponse
	(*GetAttestationPolicyRequest)(nil),           // 4: proto.connect.attestation_policy_service.v1alpha1.GetAttestationPolicyRequest
	(*GetAttestationPolicyResponse)(nil),          // 5: proto.connect.attestation_policy_service.v1alpha1.GetAttestationPolicyResponse
	(*ListAttestationPoliciesRequest)(nil),        // 6: proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesRequest
	(*ListAttestationPoliciesResponse)(nil),       // 7: proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesResponse
	(*UpdateAttestationPolicyRequest)(nil),        // 8: proto.connect.attestation_policy_service.v1alpha1.UpdateAttestationPolicyRequest
	(*UpdateAttestationPolicyResponse)(nil),       // 9: proto.connect.attestation_policy_service.v1alpha1.UpdateAttestationPolicyResponse
	(*ListAttestationPoliciesRequest_Filter)(nil), // 10: proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesRequest.Filter
	(*v1alpha1.AttestationPolicy)(nil),            // 11: proto.attestation_policy.v1alpha1.AttestationPolicy
}
var file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_depIdxs = []int32{
	11, // 0: proto.connect.attestation_policy_service.v1alpha1.CreateAttestationPolicyRequest.policy:type_name -> proto.attestation_policy.v1alpha1.AttestationPolicy
	11, // 1: proto.connect.attestation_policy_service.v1alpha1.CreateAttestationPolicyResponse.policy:type_name -> proto.attestation_policy.v1alpha1.AttestationPolicy
	11, // 2: proto.connect.attestation_policy_service.v1alpha1.GetAttestationPolicyResponse.policy:type_name -> proto.attestation_policy.v1alpha1.AttestationPolicy
	10, // 3: proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesRequest.filter:type_name -> proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesRequest.Filter
	11, // 4: proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesResponse.policies:type_name -> proto.attestation_policy.v1alpha1.AttestationPolicy
	11, // 5: proto.connect.attestation_policy_service.v1alpha1.UpdateAttestationPolicyRequest.policy:type_name -> proto.attestation_policy.v1alpha1.AttestationPolicy
	11, // 6: proto.connect.attestation_policy_service.v1alpha1.UpdateAttestationPolicyResponse.policy:type_name -> proto.attestation_policy.v1alpha1.AttestationPolicy
	0,  // 7: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.CreateAttestationPolicy:input_type -> proto.connect.attestation_policy_service.v1alpha1.CreateAttestationPolicyRequest
	2,  // 8: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.DestroyAttestationPolicy:input_type -> proto.connect.attestation_policy_service.v1alpha1.DestroyAttestationPolicyRequest
	4,  // 9: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.GetAttestationPolicy:input_type -> proto.connect.attestation_policy_service.v1alpha1.GetAttestationPolicyRequest
	6,  // 10: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.ListAttestationPolicies:input_type -> proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesRequest
	8,  // 11: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.UpdateAttestationPolicy:input_type -> proto.connect.attestation_policy_service.v1alpha1.UpdateAttestationPolicyRequest
	1,  // 12: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.CreateAttestationPolicy:output_type -> proto.connect.attestation_policy_service.v1alpha1.CreateAttestationPolicyResponse
	3,  // 13: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.DestroyAttestationPolicy:output_type -> proto.connect.attestation_policy_service.v1alpha1.DestroyAttestationPolicyResponse
	5,  // 14: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.GetAttestationPolicy:output_type -> proto.connect.attestation_policy_service.v1alpha1.GetAttestationPolicyResponse
	7,  // 15: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.ListAttestationPolicies:output_type -> proto.connect.attestation_policy_service.v1alpha1.ListAttestationPoliciesResponse
	9,  // 16: proto.connect.attestation_policy_service.v1alpha1.AttestationPolicyService.UpdateAttestationPolicy:output_type -> proto.connect.attestation_policy_service.v1alpha1.UpdateAttestationPolicyResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() {
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_init()
}
func file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_init() {
	if File_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto != nil {
		return
	}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDesc), len(file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_goTypes,
		DependencyIndexes: file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_depIdxs,
		MessageInfos:      file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_msgTypes,
	}.Build()
	File_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto = out.File
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_goTypes = nil
	file_proto_connect_attestation_policy_service_v1alpha1_attestation_policy_service_proto_depIdxs = nil
}
