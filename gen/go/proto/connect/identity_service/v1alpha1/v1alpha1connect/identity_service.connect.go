// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/connect/identity_service/v1alpha1/identity_service.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/identity_service/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IdentityServiceName is the fully-qualified name of the IdentityService service.
	IdentityServiceName = "proto.connect.identity_service.v1alpha1.IdentityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityServiceGetIdentityProcedure is the fully-qualified name of the IdentityService's
	// GetIdentity RPC.
	IdentityServiceGetIdentityProcedure = "/proto.connect.identity_service.v1alpha1.IdentityService/GetIdentity"
	// IdentityServiceListIdentitiesProcedure is the fully-qualified name of the IdentityService's
	// ListIdentities RPC.
	IdentityServiceListIdentitiesProcedure = "/proto.connect.identity_service.v1alpha1.IdentityService/ListIdentities"
)

// IdentityServiceClient is a client for the proto.connect.identity_service.v1alpha1.IdentityService
// service.
type IdentityServiceClient interface {
	GetIdentity(context.Context, *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error)
	ListIdentities(context.Context, *connect.Request[v1alpha1.ListIdentitiesRequest]) (*connect.Response[v1alpha1.ListIdentitiesResponse], error)
}

// NewIdentityServiceClient constructs a client for the
// proto.connect.identity_service.v1alpha1.IdentityService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	identityServiceMethods := v1alpha1.File_proto_connect_identity_service_v1alpha1_identity_service_proto.Services().ByName("IdentityService").Methods()
	return &identityServiceClient{
		getIdentity: connect.NewClient[v1alpha1.GetIdentityRequest, v1alpha1.GetIdentityResponse](
			httpClient,
			baseURL+IdentityServiceGetIdentityProcedure,
			connect.WithSchema(identityServiceMethods.ByName("GetIdentity")),
			connect.WithClientOptions(opts...),
		),
		listIdentities: connect.NewClient[v1alpha1.ListIdentitiesRequest, v1alpha1.ListIdentitiesResponse](
			httpClient,
			baseURL+IdentityServiceListIdentitiesProcedure,
			connect.WithSchema(identityServiceMethods.ByName("ListIdentities")),
			connect.WithClientOptions(opts...),
		),
	}
}

// identityServiceClient implements IdentityServiceClient.
type identityServiceClient struct {
	getIdentity    *connect.Client[v1alpha1.GetIdentityRequest, v1alpha1.GetIdentityResponse]
	listIdentities *connect.Client[v1alpha1.ListIdentitiesRequest, v1alpha1.ListIdentitiesResponse]
}

// GetIdentity calls proto.connect.identity_service.v1alpha1.IdentityService.GetIdentity.
func (c *identityServiceClient) GetIdentity(ctx context.Context, req *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error) {
	return c.getIdentity.CallUnary(ctx, req)
}

// ListIdentities calls proto.connect.identity_service.v1alpha1.IdentityService.ListIdentities.
func (c *identityServiceClient) ListIdentities(ctx context.Context, req *connect.Request[v1alpha1.ListIdentitiesRequest]) (*connect.Response[v1alpha1.ListIdentitiesResponse], error) {
	return c.listIdentities.CallUnary(ctx, req)
}

// IdentityServiceHandler is an implementation of the
// proto.connect.identity_service.v1alpha1.IdentityService service.
type IdentityServiceHandler interface {
	GetIdentity(context.Context, *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error)
	ListIdentities(context.Context, *connect.Request[v1alpha1.ListIdentitiesRequest]) (*connect.Response[v1alpha1.ListIdentitiesResponse], error)
}

// NewIdentityServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityServiceHandler(svc IdentityServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityServiceMethods := v1alpha1.File_proto_connect_identity_service_v1alpha1_identity_service_proto.Services().ByName("IdentityService").Methods()
	identityServiceGetIdentityHandler := connect.NewUnaryHandler(
		IdentityServiceGetIdentityProcedure,
		svc.GetIdentity,
		connect.WithSchema(identityServiceMethods.ByName("GetIdentity")),
		connect.WithHandlerOptions(opts...),
	)
	identityServiceListIdentitiesHandler := connect.NewUnaryHandler(
		IdentityServiceListIdentitiesProcedure,
		svc.ListIdentities,
		connect.WithSchema(identityServiceMethods.ByName("ListIdentities")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.connect.identity_service.v1alpha1.IdentityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityServiceGetIdentityProcedure:
			identityServiceGetIdentityHandler.ServeHTTP(w, r)
		case IdentityServiceListIdentitiesProcedure:
			identityServiceListIdentitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityServiceHandler struct{}

func (UnimplementedIdentityServiceHandler) GetIdentity(context.Context, *connect.Request[v1alpha1.GetIdentityRequest]) (*connect.Response[v1alpha1.GetIdentityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.identity_service.v1alpha1.IdentityService.GetIdentity is not implemented"))
}

func (UnimplementedIdentityServiceHandler) ListIdentities(context.Context, *connect.Request[v1alpha1.ListIdentitiesRequest]) (*connect.Response[v1alpha1.ListIdentitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.connect.identity_service.v1alpha1.IdentityService.ListIdentities is not implemented"))
}
