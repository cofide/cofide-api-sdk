// Taken from: https://github.com/spiffe/spire/blob/main/proto/spire/common/common.proto

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file proto/connect/datastore_service/v1alpha1/datastore.proto (package proto.connect.datastore_service.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file proto/connect/datastore_service/v1alpha1/datastore.proto.
 */
export const file_proto_connect_datastore_service_v1alpha1_datastore: GenFile = /*@__PURE__*/
  fileDesc("Cjhwcm90by9jb25uZWN0L2RhdGFzdG9yZV9zZXJ2aWNlL3YxYWxwaGExL2RhdGFzdG9yZS5wcm90bxIocHJvdG8uY29ubmVjdC5kYXRhc3RvcmVfc2VydmljZS52MWFscGhhMSInCghTZWxlY3RvchIMCgR0eXBlGAEgASgJEg0KBXZhbHVlGAIgASgJIlAKCVNlbGVjdG9ycxJDCgdlbnRyaWVzGAEgAygLMjIucHJvdG8uY29ubmVjdC5kYXRhc3RvcmVfc2VydmljZS52MWFscGhhMS5TZWxlY3RvciKNAgoMQXR0ZXN0ZWROb2RlEhEKCXNwaWZmZV9pZBgBIAEoCRIdChVhdHRlc3RhdGlvbl9kYXRhX3R5cGUYAiABKAkSGgoSY2VydF9zZXJpYWxfbnVtYmVyGAMgASgJEhYKDmNlcnRfbm90X2FmdGVyGAQgASgDEh4KFm5ld19jZXJ0X3NlcmlhbF9udW1iZXIYBSABKAkSGgoSbmV3X2NlcnRfbm90X2FmdGVyGAYgASgDEkUKCXNlbGVjdG9ycxgHIAMoCzIyLnByb3RvLmNvbm5lY3QuZGF0YXN0b3JlX3NlcnZpY2UudjFhbHBoYTEuU2VsZWN0b3ISFAoMY2FuX3JlYXR0ZXN0GAggASgIQlJaUGdpdGh1Yi5jb20vY29maWRlL2NvZmlkZS1hcGktc2RrL2dlbi9nby9wcm90by9jb25uZWN0L2RhdGFzdG9yZV9zZXJ2aWNlL3YxYWxwaGExYgZwcm90bzM");

/**
 * * A type which describes the conditions under which a registration
 * entry is matched. 
 *
 * @generated from message proto.connect.datastore_service.v1alpha1.Selector
 */
export type Selector = Message<"proto.connect.datastore_service.v1alpha1.Selector"> & {
  /**
   * * A selector type represents the type of attestation used in attesting
   * the entity (Eg: AWS, K8). 
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * * The value to be attested. 
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message proto.connect.datastore_service.v1alpha1.Selector.
 * Use `create(SelectorSchema)` to create a new message.
 */
export const SelectorSchema: GenMessage<Selector> = /*@__PURE__*/
  messageDesc(file_proto_connect_datastore_service_v1alpha1_datastore, 0);

/**
 * * Represents a type with a list of Selector. 
 *
 * @generated from message proto.connect.datastore_service.v1alpha1.Selectors
 */
export type Selectors = Message<"proto.connect.datastore_service.v1alpha1.Selectors"> & {
  /**
   * * A list of Selector. 
   *
   * @generated from field: repeated proto.connect.datastore_service.v1alpha1.Selector entries = 1;
   */
  entries: Selector[];
};

/**
 * Describes the message proto.connect.datastore_service.v1alpha1.Selectors.
 * Use `create(SelectorsSchema)` to create a new message.
 */
export const SelectorsSchema: GenMessage<Selectors> = /*@__PURE__*/
  messageDesc(file_proto_connect_datastore_service_v1alpha1_datastore, 1);

/**
 * Represents an attested SPIRE agent 
 *
 * @generated from message proto.connect.datastore_service.v1alpha1.AttestedNode
 */
export type AttestedNode = Message<"proto.connect.datastore_service.v1alpha1.AttestedNode"> & {
  /**
   * Node SPIFFE ID
   *
   * @generated from field: string spiffe_id = 1;
   */
  spiffeId: string;

  /**
   * Attestation data type
   *
   * @generated from field: string attestation_data_type = 2;
   */
  attestationDataType: string;

  /**
   * Node certificate serial number
   *
   * @generated from field: string cert_serial_number = 3;
   */
  certSerialNumber: string;

  /**
   * Node certificate not_after (seconds since unix epoch)
   *
   * @generated from field: int64 cert_not_after = 4;
   */
  certNotAfter: bigint;

  /**
   * Node certificate serial number
   *
   * @generated from field: string new_cert_serial_number = 5;
   */
  newCertSerialNumber: string;

  /**
   * Node certificate not_after (seconds since unix epoch)
   *
   * @generated from field: int64 new_cert_not_after = 6;
   */
  newCertNotAfter: bigint;

  /**
   * Node selectors
   *
   * @generated from field: repeated proto.connect.datastore_service.v1alpha1.Selector selectors = 7;
   */
  selectors: Selector[];

  /**
   * CanReattest field (can the attestation safely be deleted and recreated automatically)
   *
   * @generated from field: bool can_reattest = 8;
   */
  canReattest: boolean;
};

/**
 * Describes the message proto.connect.datastore_service.v1alpha1.AttestedNode.
 * Use `create(AttestedNodeSchema)` to create a new message.
 */
export const AttestedNodeSchema: GenMessage<AttestedNode> = /*@__PURE__*/
  messageDesc(file_proto_connect_datastore_service_v1alpha1_datastore, 2);

