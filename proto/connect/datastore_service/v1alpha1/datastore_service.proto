// Copyright 2025 Cofide Limited.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package proto.connect.datastore_service.v1alpha1;

import "proto/connect/datastore_service/v1alpha1/datastore.proto";

option go_package = "github.com/cofide/cofide-api-sdk/gen/go/proto/connect/datastore_service/v1alpha1";

// DataStoreService defines the gRPC service for the SPIRE server DataStore interface
service DataStoreService {
  // Node operations
  rpc CountAttestedNodes(CountAttestedNodesRequest) returns (CountAttestedNodesResponse);
  rpc CreateAttestedNode(CreateAttestedNodeRequest) returns (CreateAttestedNodeResponse);
  rpc DeleteAttestedNode(DeleteAttestedNodeRequest) returns (DeleteAttestedNodeResponse);
  rpc FetchAttestedNode(FetchAttestedNodeRequest) returns (FetchAttestedNodeResponse);
  rpc UpdateAttestedNode(UpdateAttestedNodeRequest) returns (UpdateAttestedNodeResponse);
  rpc ListAttestedNodes(ListAttestedNodesRequest) returns (ListAttestedNodesResponse);
  // Node Selector operations
  rpc GetNodeSelectors(GetNodeSelectorsRequest) returns (GetNodeSelectorsResponse);
  rpc SetNodeSelectors(SetNodeSelectorsRequest) returns (SetNodeSelectorsResponse);
  rpc ListNodeSelectors(ListNodeSelectorsRequest) returns (ListNodeSelectorsResponse);
}

message ListNodeSelectorsRequest {
}
message ListNodeSelectorsResponse {
  message NodeSelectors {
    string spiffe_id = 1;
    repeated Selector selectors = 2;
  }
  repeated NodeSelectors node_selectors = 1;
}

// Node operations request/response messages
message CountAttestedNodesRequest {}

message CountAttestedNodesResponse {
  int32 count = 1;
}

message CreateAttestedNodeRequest {
  AttestedNode node = 1;
}

message CreateAttestedNodeResponse {
  AttestedNode node = 1;
}

message DeleteAttestedNodeRequest {
  string spiffe_id = 1;
}

message DeleteAttestedNodeResponse {
  optional AttestedNode node = 1;
}

message FetchAttestedNodeRequest {
  string spiffe_id = 1;
}

message FetchAttestedNodeResponse {
  optional AttestedNode node = 1;
}

message UpdateAttestedNodeRequest {
  optional AttestedNode node = 1;
}

message UpdateAttestedNodeResponse {
  optional AttestedNode node = 1;
}

// Node Selector operations request/response messages
message GetNodeSelectorsRequest {
  string spiffe_id = 1;
}

message GetNodeSelectorsResponse {
  string spiffe_id = 1;
  repeated Selector selectors = 2;
}

message SetNodeSelectorsRequest {
  string spiffe_id = 1;
  repeated Selector selectors = 2;
}

message SetNodeSelectorsResponse {}

message ListAttestedNodesRequest {
  
}
message ListAttestedNodesResponse {
  repeated AttestedNode nodes = 1;
}